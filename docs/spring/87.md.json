["```java\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd;\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\r\n\t<groupId>com.howtodoinjava</groupId>\r\n\t<artifactId>App</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<packaging>jar</packaging>\r\n\r\n\t<name>App</name>\r\n\t<url>http://maven.apache.org</url>\r\n\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.0.3.RELEASE</version>\r\n\t</parent>\r\n\r\n\t<properties>\r\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-batch</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-quartz</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.h2database</groupId>\r\n\t\t\t<artifactId>h2</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n\t<repositories>\r\n\t\t<repository>\r\n\t\t\t<id>repository.spring.release</id>\r\n\t\t\t<name>Spring GA Repository</name>\r\n\t\t\t<url>http://repo.spring.io/release</url>\r\n\t\t</repository>\r\n\t</repositories>\r\n</project>\r\n\r\n```","```java\r\n    import org.springframework.batch.core.StepContribution;\r\n    import org.springframework.batch.core.scope.context.ChunkContext;\r\n    import org.springframework.batch.core.step.tasklet.Tasklet;\r\n    import org.springframework.batch.repeat.RepeatStatus;\r\n\r\n    public class MyTaskOne implements Tasklet {\r\n\r\n    \tpublic RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\r\n    \t\tSystem.out.println(\"MyTaskOne start..\");\r\n\r\n    \t    // ... your code\r\n\r\n    \t    System.out.println(\"MyTaskOne done..\");\r\n    \t    return RepeatStatus.FINISHED;\r\n    \t}    \r\n    }\r\n\r\n    ```","```java\r\n    public class MyTaskTwo implements Tasklet {\r\n\r\n    \tpublic RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\r\n    \t\tSystem.out.println(\"MyTaskTwo start..\");\r\n\r\n    \t    // ... your code\r\n\r\n    \t    System.out.println(\"MyTaskTwo done..\");\r\n    \t    return RepeatStatus.FINISHED;\r\n    \t}    \r\n    }\r\n\r\n    ```","```java\r\n    import org.springframework.batch.core.Job;\r\n    import org.springframework.batch.core.Step;\r\n    import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\r\n    import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\r\n    import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\r\n    import org.springframework.beans.factory.annotation.Autowired;\r\n    import org.springframework.context.annotation.Bean;\r\n    import org.springframework.context.annotation.Configuration;\r\n\r\n    import com.howtodoinjava.demo.tasks.MyTaskOne;\r\n    import com.howtodoinjava.demo.tasks.MyTaskTwo;\r\n\r\n    @Configuration\r\n    @EnableBatchProcessing\r\n    public class BatchConfig {\r\n\r\n    \t@Autowired\r\n    \tprivate JobBuilderFactory jobs;\r\n\r\n    \t@Autowired\r\n    \tprivate StepBuilderFactory steps;\r\n\r\n    \t@Bean\r\n    \tpublic Step stepOne(){\r\n    \t    return steps.get(\"stepOne\")\r\n    \t            .tasklet(new MyTaskOne())\r\n    \t            .build();\r\n    \t}\r\n\r\n    \t@Bean\r\n    \tpublic Step stepTwo(){\r\n    \t    return steps.get(\"stepTwo\")\r\n    \t            .tasklet(new MyTaskTwo())\r\n    \t            .build();\r\n    \t}   \r\n\r\n    \t@Bean(name=\"demoJobOne\")\r\n    \tpublic Job demoJobOne(){\r\n    \t    return jobs.get(\"demoJobOne\")\r\n    \t            .start(stepOne())\r\n    \t            .next(stepTwo())\r\n    \t            .build();\r\n    \t}\r\n\r\n    \t@Bean(name=\"demoJobTwo\")\r\n    \tpublic Job demoJobTwo(){\r\n    \t    return jobs.get(\"demoJobTwo\")\r\n    \t            .flow(stepOne())\r\n    \t            .build()\r\n    \t            .build();\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\nimport org.quartz.JobExecutionContext;\r\nimport org.quartz.JobExecutionException;\r\nimport org.springframework.batch.core.Job;\r\nimport org.springframework.batch.core.JobParameters;\r\nimport org.springframework.batch.core.JobParametersBuilder;\r\nimport org.springframework.batch.core.configuration.JobLocator;\r\nimport org.springframework.batch.core.launch.JobLauncher;\r\nimport org.springframework.scheduling.quartz.QuartzJobBean;\r\n\r\npublic class CustomQuartzJob extends QuartzJobBean {\r\n\r\n\tprivate String jobName;\r\n\tprivate JobLauncher jobLauncher;\r\n\tprivate JobLocator jobLocator;\r\n\r\n\tpublic String getJobName() {\r\n\t\treturn jobName;\r\n\t}\r\n\r\n\tpublic void setJobName(String jobName) {\r\n\t\tthis.jobName = jobName;\r\n\t}\r\n\r\n\tpublic JobLauncher getJobLauncher() {\r\n\t\treturn jobLauncher;\r\n\t}\r\n\r\n\tpublic void setJobLauncher(JobLauncher jobLauncher) {\r\n\t\tthis.jobLauncher = jobLauncher;\r\n\t}\r\n\r\n\tpublic JobLocator getJobLocator() {\r\n\t\treturn jobLocator;\r\n\t}\r\n\r\n\tpublic void setJobLocator(JobLocator jobLocator) {\r\n\t\tthis.jobLocator = jobLocator;\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void executeInternal(JobExecutionContext context) throws JobExecutionException \r\n\t{\r\n\t\ttry \r\n\t\t{\r\n\t\t\tJob job = jobLocator.getJob(jobName);\r\n\t\t\tJobParameters params = new JobParametersBuilder()\r\n\t\t\t\t\t.addString(\"JobID\", String.valueOf(System.currentTimeMillis()))\r\n\t\t\t\t\t.toJobParameters();\r\n\r\n\t\t\tjobLauncher.run(job, params);\r\n\t\t} \r\n\t\tcatch (Exception e) \r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```","```java\r\nimport java.io.IOException;\r\nimport java.util.Properties;\r\n\r\nimport org.quartz.JobBuilder;\r\nimport org.quartz.JobDataMap;\r\nimport org.quartz.JobDetail;\r\nimport org.quartz.SimpleScheduleBuilder;\r\nimport org.quartz.Trigger;\r\nimport org.quartz.TriggerBuilder;\r\nimport org.springframework.batch.core.configuration.JobLocator;\r\nimport org.springframework.batch.core.configuration.JobRegistry;\r\nimport org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor;\r\nimport org.springframework.batch.core.launch.JobLauncher;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.config.PropertiesFactoryBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.io.ClassPathResource;\r\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\r\n\r\nimport com.howtodoinjava.demo.jobs.CustomQuartzJob;\r\n\r\n@Configuration\r\npublic class QuartzConfig \r\n{\r\n\t@Autowired\r\n\tprivate JobLauncher jobLauncher;\r\n\r\n\t@Autowired\r\n\tprivate JobLocator jobLocator;\r\n\r\n\t@Bean\r\n    public JobRegistryBeanPostProcessor jobRegistryBeanPostProcessor(JobRegistry jobRegistry) {\r\n        JobRegistryBeanPostProcessor jobRegistryBeanPostProcessor = new JobRegistryBeanPostProcessor();\r\n        jobRegistryBeanPostProcessor.setJobRegistry(jobRegistry);\r\n        return jobRegistryBeanPostProcessor;\r\n    }\r\n\r\n\t@Bean\r\n\tpublic JobDetail jobOneDetail() {\r\n\t\t//Set Job data map\r\n\t\tJobDataMap jobDataMap = new JobDataMap();\r\n\t\tjobDataMap.put(\"jobName\", \"demoJobOne\");\r\n\t\tjobDataMap.put(\"jobLauncher\", jobLauncher);\r\n\t\tjobDataMap.put(\"jobLocator\", jobLocator);\r\n\r\n\t\treturn JobBuilder.newJob(CustomQuartzJob.class)\r\n\t\t\t\t.withIdentity(\"demoJobOne\")\r\n\t\t\t\t.setJobData(jobDataMap)\r\n\t\t\t\t.storeDurably()\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic JobDetail jobTwoDetail() {\r\n\t\t//Set Job data map\r\n\t\tJobDataMap jobDataMap = new JobDataMap();\r\n\t\tjobDataMap.put(\"jobName\", \"demoJobTwo\");\r\n\t\tjobDataMap.put(\"jobLauncher\", jobLauncher);\r\n\t\tjobDataMap.put(\"jobLocator\", jobLocator);\r\n\r\n\t\treturn JobBuilder.newJob(CustomQuartzJob.class)\r\n\t\t\t\t.withIdentity(\"demoJobTwo\")\r\n\t\t\t\t.setJobData(jobDataMap)\r\n\t\t\t\t.storeDurably()\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic Trigger jobOneTrigger() \r\n\t{\r\n\t\tSimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder\r\n\t\t\t\t.simpleSchedule()\r\n\t\t\t\t.withIntervalInSeconds(10)\r\n\t\t\t\t.repeatForever();\r\n\r\n\t\treturn TriggerBuilder\r\n\t\t\t\t.newTrigger()\r\n\t\t\t\t.forJob(jobOneDetail())\r\n\t\t\t\t.withIdentity(\"jobOneTrigger\")\r\n\t\t\t\t.withSchedule(scheduleBuilder)\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic Trigger jobTwoTrigger() \r\n\t{\r\n\t\tSimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder\r\n\t\t\t\t.simpleSchedule()\r\n\t\t\t\t.withIntervalInSeconds(20)\r\n\t\t\t\t.repeatForever();\r\n\r\n\t\treturn TriggerBuilder\r\n\t\t\t\t.newTrigger()\r\n\t\t\t\t.forJob(jobTwoDetail())\r\n\t\t\t\t.withIdentity(\"jobTwoTrigger\")\r\n\t\t\t\t.withSchedule(scheduleBuilder)\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic SchedulerFactoryBean schedulerFactoryBean() throws IOException \r\n\t{\r\n\t\tSchedulerFactoryBean scheduler = new SchedulerFactoryBean();\r\n\t\tscheduler.setTriggers(jobOneTrigger(), jobTwoTrigger());\r\n\t\tscheduler.setQuartzProperties(quartzProperties());\r\n\t\tscheduler.setJobDetails(jobOneDetail(), jobTwoDetail());\r\n\t\treturn scheduler;\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic Properties quartzProperties() throws IOException \r\n\t{\r\n\t\tPropertiesFactoryBean propertiesFactoryBean = new PropertiesFactoryBean();\r\n\t\tpropertiesFactoryBean.setLocation(new ClassPathResource(\"/quartz.properties\"));\r\n\t\tpropertiesFactoryBean.afterPropertiesSet();\r\n\t\treturn propertiesFactoryBean.getObject();\r\n\t}\r\n}\r\n\r\n```","```java\r\n#scheduler name will be \"MyScheduler\"\r\norg.quartz.scheduler.instanceName = MyScheduler\r\n\r\n#maximum of 3 jobs can be run simultaneously\r\norg.quartz.threadPool.threadCount = 3\r\n\r\n#All of Quartz data is held in memory (rather than in a database). \r\norg.quartz.jobStore.class = org.quartz.simpl.RAMJobStore\r\n\r\n```","```java\r\n#Disable batch job's auto start \r\nspring.batch.job.enabled=false\r\n\r\n#enable h2 databse console\r\nspring.h2.console.enabled=true\r\n\r\n```","```java\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class App\r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tSpringApplication.run(App.class, args);\r\n\t}\r\n}\r\n\r\n```","```java\r\n  .   ____          _            __ _ _\r\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\r\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\r\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\r\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\r\n =========|_|==============|___/=/_/_/_/\r\n :: Spring Boot ::        (v2.0.3.RELEASE)\r\n\r\n2018-07-05 10:50:53 INFO  - Starting App on FFC15B4E9C5AA with PID 9740 (C:\\Users\\zkpkhua\\DigitalDashboard_Integrated\\App\\target\\classes started by zkpkhua in C:\\Users\\zkpkhua\\DigitalDashboard_Integrated\\App)\r\n2018-07-05 10:50:53 INFO  - No active profile set, falling back to default profiles: default\r\n2018-07-05 10:50:53 INFO  - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@78b1cc93: startup date [Thu Jul 05 10:50:53 IST 2018]; root of context hierarchy\r\n2018-07-05 10:50:54 INFO  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$169797f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'org.springframework.boot.context.properties.ConversionServiceDeducer$Factory' of type [org.springframework.boot.context.properties.ConversionServiceDeducer$Factory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'dataSource' of type [com.zaxxer.hikari.HikariDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration' of type [org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$$EnhancerBySpringCGLIB$$165a725c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'jobLauncher' of type [com.sun.proxy.$Proxy41] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'jobRegistry' of type [com.sun.proxy.$Proxy43] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:54 INFO  - Bean 'quartzConfig' of type [com.howtodoinjava.demo.config.QuartzConfig$$EnhancerBySpringCGLIB$$7dc0f057] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n2018-07-05 10:50:55 INFO  - HikariPool-1 - Starting...\r\n2018-07-05 10:50:55 INFO  - HikariPool-1 - Start completed.\r\n2018-07-05 10:50:55 INFO  - No database type set, using meta data indicating: H2\r\n2018-07-05 10:50:55 INFO  - No TaskExecutor has been set, defaulting to synchronous executor.\r\n2018-07-05 10:50:56 INFO  - Executing SQL script from class path resource [org/quartz/impl/jdbcjobstore/tables_h2.sql]\r\n2018-07-05 10:50:56 INFO  - Executed SQL script from class path resource [org/quartz/impl/jdbcjobstore/tables_h2.sql] in 69 ms.\r\n2018-07-05 10:50:56 INFO  - Using default implementation for ThreadExecutor\r\n2018-07-05 10:50:56 INFO  - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl\r\n2018-07-05 10:50:56 INFO  - Quartz Scheduler v.2.3.0 created.\r\n2018-07-05 10:50:56 INFO  - RAMJobStore initialized.\r\n2018-07-05 10:50:56 INFO  - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'\r\n  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.\r\n  NOT STARTED.\r\n  Currently in standby mode.\r\n  Number of jobs executed: 0\r\n  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 3 threads.\r\n  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.\r\n\r\n2018-07-05 10:50:56 INFO  - Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.\r\n2018-07-05 10:50:56 INFO  - Quartz scheduler version: 2.3.0\r\n2018-07-05 10:50:56 INFO  - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1e7f2e0f\r\n2018-07-05 10:50:56 INFO  - Executing SQL script from class path resource [org/springframework/batch/core/schema-h2.sql]\r\n2018-07-05 10:50:56 INFO  - Executed SQL script from class path resource [org/springframework/batch/core/schema-h2.sql] in 30 ms.\r\n2018-07-05 10:50:57 INFO  - Registering beans for JMX exposure on startup\r\n2018-07-05 10:50:57 INFO  - Bean with name 'dataSource' has been autodetected for JMX exposure\r\n2018-07-05 10:50:57 INFO  - Located MBean 'dataSource': registering with JMX server as MBean [com.zaxxer.hikari:name=dataSource,type=HikariDataSource]\r\n2018-07-05 10:50:57 INFO  - Starting beans in phase 2147483647\r\n2018-07-05 10:50:57 INFO  - Starting Quartz Scheduler now\r\n2018-07-05 10:50:57 INFO  - Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.\r\n2018-07-05 10:50:57 INFO  - Started App in 4.164 seconds (JVM running for 4.941)\r\n2018-07-05 10:50:57 INFO  - Job: [SimpleJob: [name=demoJobOne]] launched with the following parameters: [{JobID=1530768057055}]\r\n2018-07-05 10:50:57 INFO  - Job: [FlowJob: [name=demoJobTwo]] launched with the following parameters: [{JobID=1530768057057}]\r\n2018-07-05 10:50:57 INFO  - Executing step: [stepOne]\r\nMyTaskOne start..\r\nMyTaskOne done..\r\n2018-07-05 10:50:57 INFO  - Executing step: [stepTwo]\r\nMyTaskTwo start..\r\nMyTaskTwo done..\r\n2018-07-05 10:50:57 INFO  - Executing step: [stepOne]\r\n2018-07-05 10:50:57 INFO  - Job: [SimpleJob: [name=demoJobOne]] completed with the following parameters: [{JobID=1530768057055}] and the following status: [COMPLETED]\r\nMyTaskOne start..\r\nMyTaskOne done..\r\n2018-07-05 10:50:57 INFO  - Job: [FlowJob: [name=demoJobTwo]] completed with the following parameters: [{JobID=1530768057057}] and the following status: [COMPLETED]\r\n\r\n2018-07-05 10:51:05 INFO  - Job: [SimpleJob: [name=demoJobOne]] launched with the following parameters: [{JobID=1530768065955}]\r\n2018-07-05 10:51:05 INFO  - Executing step: [stepOne]\r\nMyTaskOne start..\r\nMyTaskOne done..\r\n2018-07-05 10:51:05 INFO  - Executing step: [stepTwo]\r\nMyTaskTwo start..\r\nMyTaskTwo done..\r\n2018-07-05 10:51:05 INFO  - Job: [SimpleJob: [name=demoJobOne]] completed with the following parameters: [{JobID=1530768065955}] and the following status: [COMPLETED]\r\n\r\n2018-07-05 10:51:15 INFO  - Job: [SimpleJob: [name=demoJobOne]] launched with the following parameters: [{JobID=1530768075955}]\r\n2018-07-05 10:51:15 INFO  - Executing step: [stepOne]\r\nMyTaskOne start..\r\nMyTaskOne done..\r\n2018-07-05 10:51:15 INFO  - Executing step: [stepTwo]\r\nMyTaskTwo start..\r\nMyTaskTwo done..\r\n2018-07-05 10:51:15 INFO  - Job: [SimpleJob: [name=demoJobOne]] completed with the following parameters: [{JobID=1530768075955}] and the following status: [COMPLETED]\r\n\r\n2018-07-05 10:51:15 INFO  - Job: [FlowJob: [name=demoJobTwo]] launched with the following parameters: [{JobID=1530768075980}]\r\n2018-07-05 10:51:15 INFO  - Executing step: [stepOne]\r\nMyTaskOne start..\r\nMyTaskOne done..\r\n2018-07-05 10:51:16 INFO  - Job: [FlowJob: [name=demoJobTwo]] completed with the following parameters: [{JobID=1530768075980}] and the following status: [COMPLETED]\r\n\r\n```"]