["```java\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \r\n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.5.RELEASE</version>\r\n        <relativePath /> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.howtodoinjava.demo</groupId>\r\n    <artifactId>SpringBoot2Demo</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>SpringBoot2Demo</name>\r\n    <description>Demo project for Spring Boot</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.h2database</groupId>\r\n            <artifactId>h2</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```","```java\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\n\r\n@Entity\r\n@Table(name=\"TBL_EMPLOYEES\")\r\npublic class EmployeeEntity {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    @Column(name=\"first_name\")\r\n    private String firstName;\r\n\r\n    @Column(name=\"last_name\")\r\n    private String lastName;\r\n\r\n    @Column(name=\"email\", nullable=false, length=200)\r\n    private String email;\r\n\r\n    //Setters and getters\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"EmployeeEntity [id=\" + id + \", firstName=\" + firstName + \r\n                \", lastName=\" + lastName + \", email=\" + email   + \"]\";\r\n    }\r\n}\r\n\r\n```","```java\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport com.howtodoinjava.demo.entity.EmployeeEntity;\r\n\r\n@Repository\r\npublic interface EmployeeRepository \r\n        extends JpaRepository<EmployeeEntity, Long> {\r\n\r\n}\r\n\r\n```","```java\r\nspring.datasource.url=jdbc:h2:file:~/test\r\nspring.datasource.driverClassName=org.h2.Driver\r\nspring.datasource.username=sa\r\nspring.datasource.password=\r\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\r\n\r\n# Enabling H2 Console\r\nspring.h2.console.enabled=true\r\n\r\n# Custom H2 Console URL\r\nspring.h2.console.path=/h2-console\r\n\r\n# create database schema from SQL files\r\nspring.jpa.hibernate.ddl-auto=none\r\n\r\n#Turn Statistics on and log SQL stmts\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.format_sql=true\r\nspring.jpa.properties.hibernate.generate_statistics=false\r\n#logging.level.org.hibernate.type=trace\r\n#logging.level.org.hibernate.stat=debug\r\n\r\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n\r\n\r\n```","```java\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.howtodoinjava.demo.entity.EmployeeEntity;\r\nimport com.howtodoinjava.demo.exception.RecordNotFoundException;\r\nimport com.howtodoinjava.demo.repository.EmployeeRepository;\r\n\r\n@Service\r\npublic class EmployeeService {\r\n\r\n    @Autowired\r\n    EmployeeRepository repository;\r\n\r\n    public List<EmployeeEntity> getAllEmployees()\r\n    {\r\n        List<EmployeeEntity> employeeList = repository.findAll();\r\n\r\n        if(employeeList.size() > 0) {\r\n            return employeeList;\r\n        } else {\r\n            return new ArrayList<EmployeeEntity>();\r\n        }\r\n    }\r\n\r\n    public EmployeeEntity getEmployeeById(Long id) throws RecordNotFoundException \r\n    {\r\n        Optional<EmployeeEntity> employee = repository.findById(id);\r\n\r\n        if(employee.isPresent()) {\r\n            return employee.get();\r\n        } else {\r\n            throw new RecordNotFoundException(\"No employee record exist for given id\");\r\n        }\r\n    }\r\n\r\n    public EmployeeEntity createOrUpdateEmployee(EmployeeEntity entity) throws RecordNotFoundException \r\n    {\r\n        Optional<EmployeeEntity> employee = repository.findById(entity.getId());\r\n\r\n        if(employee.isPresent()) \r\n        {\r\n            EmployeeEntity newEntity = employee.get();\r\n            newEntity.setEmail(entity.getEmail());\r\n            newEntity.setFirstName(entity.getFirstName());\r\n            newEntity.setLastName(entity.getLastName());\r\n\r\n            newEntity = repository.save(newEntity);\r\n\r\n            return newEntity;\r\n        } else {\r\n            entity = repository.save(entity);\r\n\r\n            return entity;\r\n        }\r\n    } \r\n\r\n    public void deleteEmployeeById(Long id) throws RecordNotFoundException \r\n    {\r\n        Optional<EmployeeEntity> employee = repository.findById(id);\r\n\r\n        if(employee.isPresent()) \r\n        {\r\n            repository.deleteById(id);\r\n        } else {\r\n            throw new RecordNotFoundException(\"No employee record exist for given id\");\r\n        }\r\n    } \r\n}\r\n\r\n```","```java\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport com.howtodoinjava.demo.entity.EmployeeEntity;\r\nimport com.howtodoinjava.demo.exception.RecordNotFoundException;\r\nimport com.howtodoinjava.demo.service.EmployeeService;\r\n\r\n@RestController\r\n@RequestMapping(\"/employees\")\r\npublic class EmployeeController \r\n{\r\n    @Autowired\r\n    EmployeeService service;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<EmployeeEntity>> getAllEmployees() {\r\n        List<EmployeeEntity> list = service.getAllEmployees();\r\n\r\n        return new ResponseEntity<List<EmployeeEntity>>(list, new HttpHeaders(), HttpStatus.OK);\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<EmployeeEntity> getEmployeeById(@PathVariable(\"id\") Long id) \r\n                                                    throws RecordNotFoundException {\r\n        EmployeeEntity entity = service.getEmployeeById(id);\r\n\r\n        return new ResponseEntity<EmployeeEntity>(entity, new HttpHeaders(), HttpStatus.OK);\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<EmployeeEntity> createOrUpdateEmployee(EmployeeEntity employee)\r\n                                                    throws RecordNotFoundException {\r\n        EmployeeEntity updated = service.createOrUpdateEmployee(employee);\r\n        return new ResponseEntity<EmployeeEntity>(updated, new HttpHeaders(), HttpStatus.OK);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public HttpStatus deleteEmployeeById(@PathVariable(\"id\") Long id) \r\n                                                    throws RecordNotFoundException {\r\n        service.deleteEmployeeById(id);\r\n        return HttpStatus.FORBIDDEN;\r\n    }\r\n\r\n}\r\n\r\n```","```java\r\n    Hibernate: \r\n        select\r\n            employeeen0_.id as id1_0_,\r\n            employeeen0_.email as email2_0_,\r\n            employeeen0_.first_name as first_na3_0_,\r\n            employeeen0_.last_name as last_nam4_0_ \r\n        from\r\n            tbl_employees employeeen0_\r\n\r\n    ```","```java\r\n    [\r\n        {\r\n            \"id\": 1,\r\n            \"firstName\": \"Lokesh\",\r\n            \"lastName\": \"Gupta\",\r\n            \"email\": \"abc@gmail.com\"\r\n        },\r\n        {\r\n            \"id\": 2,\r\n            \"firstName\": \"Deja\",\r\n            \"lastName\": \"Vu\",\r\n            \"email\": \"xyz@email.com\"\r\n        },\r\n        {\r\n            \"id\": 3,\r\n            \"firstName\": \"Caption\",\r\n            \"lastName\": \"America\",\r\n            \"email\": \"cap@marvel.com\"\r\n        }\r\n    ]\r\n\r\n    ```","```java\r\n    Hibernate: \r\n        select\r\n            employeeen0_.id as id1_0_0_,\r\n            employeeen0_.email as email2_0_0_,\r\n            employeeen0_.first_name as first_na3_0_0_,\r\n            employeeen0_.last_name as last_nam4_0_0_ \r\n        from\r\n            tbl_employees employeeen0_ \r\n        where\r\n            employeeen0_.id=?\r\n\r\n    ```","```java\r\n    {\r\n        \"id\": 2,\r\n        \"firstName\": \"Deja\",\r\n        \"lastName\": \"Vu\",\r\n        \"email\": \"xyz@email.com\"\r\n    }\r\n\r\n    ```"]