["```java\r\n    package com.howtodoinjava.example.employee;\r\n    import org.springframework.boot.SpringApplication;\r\n    import org.springframework.boot.autoconfigure.SpringBootApplication;\r\n    import org.springframework.cloud.netflix.eureka.EnableEurekaClient;\r\n\r\n    @SpringBootApplication\r\n    @EnableEurekaClient\r\n    public class EmployeeServiceApplication {\r\n\r\n      public static void main(String[] args) \r\n      {\r\n        SpringApplication.run(EmployeeServiceApplication.class, args);\r\n      }\r\n    }\r\n    ```","```java\r\n    package com.howtodoinjava.example.employee.controller;\r\n\r\n    import java.util.HashMap;\r\n    import java.util.Map;\r\n\r\n    import org.springframework.web.bind.annotation.PathVariable;\r\n    import org.springframework.web.bind.annotation.RequestMapping;\r\n    import org.springframework.web.bind.annotation.RequestMethod;\r\n    import org.springframework.web.bind.annotation.RestController;\r\n\r\n    import com.howtodoinjava.example.employee.beans.Employee;\r\n\r\n    @RestController\r\n    public class EmployeeServiceController {\r\n\r\n    \tprivate static final Map<Integer, Employee> employeeData = new HashMap<Integer,Employee() {\r\n\r\n        \tprivate static final long serialVersionUID = -3970206781360313502L;\r\n        \t{\r\n        \t\tput(111,new Employee(111,\"Employee1\"));\r\n        \t\tput(222,new Employee(222,\"Employee2\"));\r\n        \t}\r\n        };\r\n\r\n        @RequestMapping(value = \"/findEmployeeDetails/{employeeId}\", method = RequestMethod.GET)\r\n        public Employee getEmployeeDetails(@PathVariable int employeeId) {\r\n            System.out.println(\"Getting Employee details for \" + employeeId);\r\n\r\n            Employee employee = employeeData.get(employeeId);\r\n            if (employee == null) {\r\n\r\n            \temployee = new Employee(0, \"N/A\");\r\n            }\r\n            return employee;\r\n        }\r\n    }\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.example.employee.beans;\r\n\r\n    public class Employee {\r\n\r\n    \tprivate String name;\r\n    \tprivate int id;\r\n\r\n    \t@Override\r\n    \tpublic String toString() {\r\n    \t\treturn \"Employee [name=\" + name + \", id=\" + id + \"]\";\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\n    server:\r\n      port: 8011    \r\n\r\n    eureka:         \r\n      instance:\r\n        leaseRenewalIntervalInSeconds: 5\r\n        leaseExpirationDurationInSeconds: 2\r\n      client:\r\n        serviceUrl:\r\n          defaultZone: http://localhost:8761/eureka/\r\n        healthcheck:\r\n          enabled: true\r\n        lease:\r\n          duration: 5\r\n\r\n    spring:    \r\n      application:\r\n        name: employee-service   \r\n\r\n    management:\r\n      security:\r\n        enabled: false  \r\n\r\n    logging:\r\n      level:\r\n        com.self.sprintboot.learning.employee: DEBUG\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.example.apigateway;\r\n\r\n    import org.springframework.boot.SpringApplication;\r\n    import org.springframework.boot.autoconfigure.SpringBootApplication;\r\n    import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;\r\n    import org.springframework.cloud.netflix.eureka.EnableEurekaClient;\r\n    import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\r\n\r\n    @SpringBootApplication\r\n    @EnableEurekaClient\r\n    @EnableHystrixDashboard\r\n    @EnableCircuitBreaker\r\n    public class ApiGatewayApplication {\r\n\r\n    \tpublic static void main(String[] args) {\r\n    \t\tSpringApplication.run(ApiGatewayApplication.class, args);\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.example.apigateway.controller;\r\n\r\n    import org.springframework.beans.factory.annotation.Autowired;\r\n    import org.springframework.cloud.client.loadbalancer.LoadBalanced;\r\n    import org.springframework.context.annotation.Bean;\r\n    import org.springframework.core.ParameterizedTypeReference;\r\n    import org.springframework.http.HttpMethod;\r\n    import org.springframework.web.bind.annotation.PathVariable;\r\n    import org.springframework.web.bind.annotation.RequestMapping;\r\n    import org.springframework.web.bind.annotation.RequestMethod;\r\n    import org.springframework.web.bind.annotation.RestController;\r\n    import org.springframework.web.client.RestTemplate;\r\n\r\n    import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\r\n\r\n    @RestController\r\n    public class EmployeeController {\r\n\r\n    \t@Autowired\r\n        RestTemplate restTemplate;\r\n\r\n        @RequestMapping(value = \"/employeeDetails/{employeeid}\", method = RequestMethod.GET)\r\n        @HystrixCommand(fallbackMethod = \"fallbackMethod\")\r\n        public String getStudents(@PathVariable int employeeid)\r\n        {\r\n            System.out.println(\"Getting Employee details for \" + employeeid);\r\n\r\n            String response = restTemplate.exchange(\"http://employee-service/findEmployeeDetails/{employeeid}\",\r\n                                    HttpMethod.GET, null, new ParameterizedTypeReference<String>() {}, employeeid).getBody();\r\n\r\n            System.out.println(\"Response Body \" + response);\r\n\r\n            return \"Employee Id -  \" + employeeid + \" [ Employee Details \" + response+\" ]\";\r\n        }\r\n\r\n        public String  fallbackMethod(int employeeid){\r\n\r\n        \treturn \"Fallback response:: No employee details available temporarily\";\r\n        }\r\n\r\n        @Bean\r\n        @LoadBalanced\r\n        public RestTemplate restTemplate() {\r\n            return new RestTemplate();\r\n        }\r\n    }\r\n\r\n    ```","```java\r\n    server:\r\n      port: 8010    #port number\r\n\r\n    eureka:\r\n      instance:\r\n        leaseRenewalIntervalInSeconds: 5\r\n        leaseExpirationDurationInSeconds: 2\r\n      client:\r\n        serviceUrl:\r\n          defaultZone: http://localhost:8761/eureka/\r\n        healthcheck:\r\n          enabled: true\r\n        lease:\r\n          duration: 5\r\n\r\n    spring:    \r\n      application:\r\n        name: api-gateway   \r\n\r\n    management:\r\n      security:\r\n        enabled: false  \r\n\r\n    logging:\r\n      level:\r\n        com.self.sprintboot.learning.apigateway: DEBUG\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.example.eureka;\r\n\r\n    import org.springframework.boot.SpringApplication;\r\n    import org.springframework.boot.autoconfigure.SpringBootApplication;\r\n    import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\r\n\r\n    import de.codecentric.boot.admin.config.EnableAdminServer;\r\n\r\n    @SpringBootApplication\r\n    @EnableEurekaServer\r\n    @EnableAdminServer\r\n\r\n    public class EurekaServerApplication {\r\n\r\n    \tpublic static void main(String[] args) {\r\n    \t\tSpringApplication.run(EurekaServerApplication.class, args);\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\n    server:\r\n      port: ${PORT:8761}\r\n\r\n    eureka:\r\n      client:\r\n        registryFetchIntervalSeconds: 5\r\n        registerWithEureka: false\r\n        serviceUrl:\r\n          defaultZone: ${DISCOVERY_URL:http://localhost:8761}/eureka/\r\n      instance:\r\n        leaseRenewalIntervalInSeconds: 10\r\n\r\n    management:\r\n      security:\r\n        enabled: false\r\n    spring:\r\n      boot:\r\n        admin:\r\n          context-path: /admin  #A different context path for Spring boot admin server has been provided avoiding conflict with eureka\r\n\r\n    ```","```java\r\n    spring:\r\n      application:\r\n        name: Eureka-Server\r\n      cloud:\r\n        config:\r\n          uri: ${CONFIG_SERVER_URL:http://localhost:8888}\r\n\r\n    ```"]