["```java\r\n@PostMapping(value = \"/employees\")\r\npublic ResponseEntity<EmployeeVO> addEmployee (@RequestBody EmployeeVO employee)\r\n{\r\n    EmployeeDB.addEmployee(employee);\r\n    return new ResponseEntity<EmployeeVO>(employee, HttpStatus.OK);\r\n}\r\n\r\n@GetMapping(value = \"/employees/{id}\") \r\npublic ResponseEntity<EmployeeVO> getEmployeeById (@PathVariable(\"id\") int id)\r\n{\r\n    EmployeeVO employee = EmployeeDB.getEmployeeById(id);\r\n\r\n    if(employee == null) {\r\n    \t throw new RecordNotFoundException(\"Invalid employee id : \" + id);\r\n    }\r\n    return new ResponseEntity<EmployeeVO>(employee, HttpStatus.OK);\r\n}\r\n\r\n```","```java\r\n@XmlRootElement(name = \"employee\")\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\npublic class EmployeeVO extends ResourceSupport implements Serializable\r\n{\r\n\tprivate Integer employeeId;\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\tprivate String email;\r\n\r\n\tpublic EmployeeVO(Integer id, String firstName, String lastName, String email) {\r\n\t\tsuper();\r\n\t\tthis.employeeId = id;\r\n\t\tthis.firstName = firstName;\r\n\t\tthis.lastName = lastName;\r\n\t\tthis.email = email;\r\n\t}\r\n\r\n\tpublic EmployeeVO() {\r\n\t}\r\n\r\n\t//Removed setter/getter for readability\r\n}\r\n\r\n```","```java\r\n    @XmlRootElement(name = \"employee\")\r\n    @XmlAccessorType(XmlAccessType.FIELD)\r\n    public class EmployeeVO extends ResourceSupport implements Serializable\r\n    {\r\n    \tprivate static final long serialVersionUID = 1L;\r\n\r\n    \tpublic EmployeeVO(Integer id, String firstName, String lastName, String email) {\r\n    \t\tsuper();\r\n    \t\tthis.employeeId = id;\r\n    \t\tthis.firstName = firstName;\r\n    \t\tthis.lastName = lastName;\r\n    \t\tthis.email = email;\r\n    \t}\r\n\r\n    \tpublic EmployeeVO() {\r\n    \t}\r\n\r\n    \tprivate Integer employeeId;\r\n\r\n    \t@NotEmpty(message = \"first name must not be empty\")\r\n    \tprivate String firstName;\r\n\r\n    \t@NotEmpty(message = \"last name must not be empty\")\r\n    \tprivate String lastName;\r\n\r\n    \t@NotEmpty(message = \"email must not be empty\")\r\n    \t@Email(message = \"email should be a valid email\")\r\n    \tprivate String email;\r\n\r\n    \t//Removed setter/getter for readability\r\n    }\r\n\r\n    ```","```java\r\n    @PostMapping(value = \"/employees\")\r\n    public ResponseEntity<EmployeeVO> addEmployee (@Valid @RequestBody EmployeeVO employee)\r\n    {\r\n        EmployeeDB.addEmployee(employee);\r\n        return new ResponseEntity<EmployeeVO>(employee, HttpStatus.OK);\r\n    }\r\n\r\n    ```","```java\r\npackage com.howtodoinjava.demo.exception;\r\n\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.ResponseStatus;\r\n\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic class RecordNotFoundException extends RuntimeException \r\n{\r\n\tpublic RecordNotFoundException(String exception) {\r\n\t\tsuper(exception);\r\n\t}\r\n}\r\n\r\n```","```java\r\nimport java.util.List;\r\nimport javax.xml.bind.annotation.XmlRootElement;\r\n\r\n@XmlRootElement(name = \"error\")\r\npublic class ErrorResponse \r\n{\r\n\tpublic ErrorResponse(String message, List<String> details) {\r\n\t\tsuper();\r\n\t\tthis.message = message;\r\n\t\tthis.details = details;\r\n\t}\r\n\r\n\t//General error message about nature of error\r\n\tprivate String message;\r\n\r\n\t//Specific errors in API request processing\r\n\tprivate List<String> details;\r\n\r\n\t//Getter and setters\r\n}\r\n\r\n```","```java\r\npackage com.howtodoinjava.demo.exception;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.bind.MethodArgumentNotValidException;\r\nimport org.springframework.web.bind.annotation.ControllerAdvice;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.context.request.WebRequest;\r\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\r\n\r\n@SuppressWarnings({\"unchecked\",\"rawtypes\"})\r\n@ControllerAdvice\r\npublic class CustomExceptionHandler extends ResponseEntityExceptionHandler \r\n{\r\n\t@ExceptionHandler(Exception.class)\r\n\tpublic final ResponseEntity<Object> handleAllExceptions(Exception ex, WebRequest request) {\r\n\t\tList<String> details = new ArrayList<>();\r\n\t\tdetails.add(ex.getLocalizedMessage());\r\n\t\tErrorResponse error = new ErrorResponse(\"Server Error\", details);\r\n\t\treturn new ResponseEntity(error, HttpStatus.INTERNAL_SERVER_ERROR);\r\n\t}\r\n\r\n\t@ExceptionHandler(RecordNotFoundException.class)\r\n\tpublic final ResponseEntity<Object> handleUserNotFoundException(RecordNotFoundException ex, WebRequest request) {\r\n\t\tList<String> details = new ArrayList<>();\r\n\t\tdetails.add(ex.getLocalizedMessage());\r\n\t\tErrorResponse error = new ErrorResponse(\"Record Not Found\", details);\r\n\t\treturn new ResponseEntity(error, HttpStatus.NOT_FOUND);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\r\n\t\tList<String> details = new ArrayList<>();\r\n\t\tfor(ObjectError error : ex.getBindingResult().getAllErrors()) {\r\n\t\t\tdetails.add(error.getDefaultMessage());\r\n\t\t}\r\n\t\tErrorResponse error = new ErrorResponse(\"Validation Failed\", details);\r\n\t\treturn new ResponseEntity(error, HttpStatus.BAD_REQUEST);\r\n\t}\r\n}\r\n\r\n```","```java\r\nHTTP Status : 200\r\n\r\n{\r\n    \"employeeId\": 1,\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Wick\",\r\n    \"email\": \"howtodoinjava@gmail.com\",\r\n}\r\n\r\n```","```java\r\nHTTP Status : 404\r\n\r\n{\r\n    \"message\": \"Record Not Found\",\r\n    \"details\": [\r\n        \"Invalid employee id : 23\"\r\n    ]\r\n}\r\n\r\n```","```java\r\n{\r\n    \"lastName\": \"Bill\",\r\n    \"email\": \"ibill@gmail.com\"\r\n}\r\n\r\n```","```java\r\nHTTP Status : 400\r\n\r\n{\r\n    \"message\": \"Validation Failed\",\r\n    \"details\": [\r\n        \"first name must not be empty\"\r\n    ]\r\n}\r\n\r\n```","```java\r\n{\r\n    \"email\": \"ibill@gmail.com\"\r\n}\r\n\r\n```","```java\r\nHTTP Status : 400\r\n\r\n{\r\n    \"message\": \"Validation Failed\",\r\n    \"details\": [\r\n        \"last name must not be empty\",\r\n        \"first name must not be empty\"\r\n    ]\r\n}\r\n\r\n```","```java\r\n{\r\n\t\"firstName\":\"Lokesh\",\r\n    \"email\": \"ibill_gmail.com\" //invalid email in request\r\n}\r\n\r\n```","```java\r\nHTTP Status : 400\r\n\r\n{\r\n    \"message\": \"Validation Failed\",\r\n    \"details\": [\r\n        \"last name must not be empty\",\r\n        \"email should be a valid email\"\r\n    ]\r\n}\r\n```"]