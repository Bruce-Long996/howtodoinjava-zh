["```java\nimport org.springframework.batch.item.ExecutionContext;\nimport org.springframework.batch.item.ItemStream;\nimport org.springframework.batch.item.ItemStreamException;\n\npublic class ItemCountItemStream implements ItemStream {\n\n\tpublic void open(ExecutionContext executionContext) throws ItemStreamException {\n\t}\n\n\tpublic void update(ExecutionContext executionContext) throws ItemStreamException {\n\t\tSystem.out.println(\"ItemCount: \"+executionContext.get(\"FlatFileItemReader.read.count\"));\n\t}\n\n\tpublic void close() throws ItemStreamException {\n\t}\n}\n\n```","```java\n@Autowired\nprivate JobBuilderFactory jobBuilderFactory;\n\n@Autowired\nprivate StepBuilderFactory stepBuilderFactory;\n\n@Bean\npublic Job readCSVFilesJob() {\n\treturn jobBuilderFactory\n\t\t\t.get(\"readCSVFilesJob\")\n\t\t\t.incrementer(new RunIdIncrementer())\n\t\t\t.start(step1())\n\t\t\t.build();\n}\n\n@Bean\npublic Step step1() {\n\treturn stepBuilderFactory\n\t\t\t.get(\"step1\")\n\t\t\t.<Employee, Employee>chunk(1)\n\t\t\t.reader(reader())\n\t\t\t.writer(writer())\n\t\t\t.stream(stream())\n\t\t\t.build();\n}\n\n@Bean\npublic ItemCountItemStream stream() {\n\treturn new ItemCountItemStream();\n}\n\n```","```java\nimport org.springframework.batch.core.ChunkListener;\nimport org.springframework.batch.core.scope.context.ChunkContext;\n\npublic class ItemCountListener implements ChunkListener {\n\n\t@Override\n\tpublic void beforeChunk(ChunkContext context) {\n\t}\n\n\t@Override\n\tpublic void afterChunk(ChunkContext context) {\n\n\t\tint count = context.getStepContext().getStepExecution().getReadCount();\n\t\tSystem.out.println(\"ItemCount: \" + count);\n\t}\n\n\t@Override\n\tpublic void afterChunkError(ChunkContext context) {\n\t}\n}\n\n```","```java\n@Autowired\nprivate JobBuilderFactory jobBuilderFactory;\n\n@Autowired\nprivate StepBuilderFactory stepBuilderFactory;\n\n@Bean\npublic Job readCSVFilesJob() {\n\treturn jobBuilderFactory\n\t\t\t.get(\"readCSVFilesJob\")\n\t\t\t.incrementer(new RunIdIncrementer())\n\t\t\t.start(step1())\n\t\t\t.build();\n}\n\n@Bean\npublic Step step1() {\n\treturn stepBuilderFactory\n\t\t\t.get(\"step1\")\n\t\t\t.<Employee, Employee>chunk(1)\n\t\t\t.reader(reader())\n\t\t\t.writer(writer())\n\t\t\t.listener(listener())\n\t\t\t.build();\n}\n\n@Bean\npublic ItemCountListener listener() {\n\treturn new ItemCountListener();\n}\n\n```","```java\nid,firstName,lastName\n1,Lokesh,Gupta\n2,Amit,Mishra\n3,Pankaj,Kumar\n4,David,Miller\n5,David,Walsh\n\n```","```java\npackage com.howtodoinjava.demo.config;\n\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.Step;\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\nimport org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\nimport org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\nimport org.springframework.batch.core.launch.support.RunIdIncrementer;\nimport org.springframework.batch.item.file.FlatFileItemReader;\nimport org.springframework.batch.item.file.LineMapper;\nimport org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;\nimport org.springframework.batch.item.file.mapping.DefaultLineMapper;\nimport org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\nimport com.howtodoinjava.demo.model.Employee;\n\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfig \n{\n\t@Autowired\n\tprivate JobBuilderFactory jobBuilderFactory;\n\n\t@Autowired\n\tprivate StepBuilderFactory stepBuilderFactory;\n\n\t@Value(\"/input/inputData.csv\")\n\tprivate Resource inputResource;\n\n\t@Bean\n\tpublic Job readCSVFilesJob() {\n\t\treturn jobBuilderFactory\n\t\t\t\t.get(\"readCSVFilesJob\")\n\t\t\t\t.incrementer(new RunIdIncrementer())\n\t\t\t\t.start(step1())\n\t\t\t\t.build();\n\t}\n\n\t@Bean\n\tpublic Step step1() {\n\t\treturn stepBuilderFactory\n\t\t\t\t.get(\"step1\")\n\t\t\t\t.<Employee, Employee>chunk(1)\n\t\t\t\t.reader(reader())\n\t\t\t\t.writer(writer())\n\t\t\t\t.listener(listner())\n\t\t\t\t.build();\n\t}\n\n\t@Bean\n\tpublic ItemCountListener listner() {\n\t\treturn new ItemCountListener();\n\t}\n\n\t@Bean\n\tpublic FlatFileItemReader<Employee> reader() {\n\t\tFlatFileItemReader<Employee> itemReader = new FlatFileItemReader<Employee>();\n\t\titemReader.setLineMapper(lineMapper());\n\t\titemReader.setLinesToSkip(1);\n\t\titemReader.setResource(inputResource);\n\t\treturn itemReader;\n\t}\n\n\t@Bean\n\tpublic LineMapper<Employee> lineMapper() {\n\t\tDefaultLineMapper<Employee> lineMapper = new DefaultLineMapper<Employee>();\n\t\tDelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();\n\t\tlineTokenizer.setNames(new String[] { \"id\", \"firstName\", \"lastName\" });\n\t\tlineTokenizer.setIncludedFields(new int[] { 0, 1, 2 });\n\t\tBeanWrapperFieldSetMapper<Employee> fieldSetMapper = new BeanWrapperFieldSetMapper<Employee>();\n\t\tfieldSetMapper.setTargetType(Employee.class);\n\t\tlineMapper.setLineTokenizer(lineTokenizer);\n\t\tlineMapper.setFieldSetMapper(fieldSetMapper);\n\t\treturn lineMapper;\n\t}\n\n\t@Bean\n\tpublic ConsoleItemWriter<Employee> writer() {\n\t\treturn new ConsoleItemWriter<Employee>();\n\t}\n}\n\n```","```java\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.JobParameters;\nimport org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\n\n@SpringBootApplication\n@EnableScheduling\npublic class App\n{\n    @Autowired\n    JobLauncher jobLauncher;\n\n    @Autowired\n    Job job;\n\n    public static void main(String[] args)\n    {\n        SpringApplication.run(App.class, args);\n    }\n\n    @Scheduled(cron = \"0 */1 * * * ?\")\n    public void perform() throws Exception\n    {\n        JobParameters params = new JobParametersBuilder()\n                .addString(\"JobID\", String.valueOf(System.currentTimeMillis()))\n                .toJobParameters();\n        jobLauncher.run(job, params);\n    }\n}\n\n```","```java\n2018-07-11 16:38:00 INFO  - Job: [SimpleJob: [name=readCSVFilesJob]] launched with the following parameters: [{JobID=1531307280004}]\n\n2018-07-11 16:38:00 INFO  - Executing step: [step1]\n\nEmployee [id=1, firstName=Lokesh, lastName=Gupta]\nItemCount: 1\nEmployee [id=2, firstName=Amit, lastName=Mishra]\nItemCount: 2\nEmployee [id=3, firstName=Pankaj, lastName=Kumar]\nItemCount: 3\nEmployee [id=4, firstName=David, lastName=Miller]\nItemCount: 4\nEmployee [id=5, firstName=David, lastName=Walsh]\nItemCount: 5\nItemCount: 5\n\n2018-07-11 16:38:00 INFO  - Job: [SimpleJob: [name=readCSVFilesJob]] completed with the following parameters: [{JobID=1531307280004}] and the following status: [COMPLETED]\n\n```"]