["```java\r\n    <dependencies>\r\n    \t<dependency>\r\n    \t\t<groupId>org.springframework.boot</groupId>\r\n    \t\t<artifactId>spring-boot-starter-jersey</artifactId>\r\n    \t</dependency>\r\n    \t<dependency>\r\n    \t\t<groupId>org.springframework.boot</groupId>\r\n    \t\t<artifactId>spring-boot-starter-test</artifactId>\r\n    \t\t<scope>test</scope>\r\n    \t</dependency>\r\n    </dependencies>\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.jerseydemo;\r\n\r\n    import java.net.URI;\r\n    import java.net.URISyntaxException;\r\n    import java.util.ArrayList;\r\n    import java.util.HashMap;\r\n    import java.util.Map;\r\n    import javax.ws.rs.Consumes;\r\n    import javax.ws.rs.DELETE;\r\n    import javax.ws.rs.GET;\r\n    import javax.ws.rs.POST;\r\n    import javax.ws.rs.PUT;\r\n    import javax.ws.rs.Path;\r\n    import javax.ws.rs.PathParam;\r\n    import javax.ws.rs.Produces;\r\n    import javax.ws.rs.core.Response;\r\n    import javax.xml.bind.annotation.XmlAccessType;\r\n    import javax.xml.bind.annotation.XmlAccessorType;\r\n    import javax.xml.bind.annotation.XmlRootElement;\r\n\r\n    @XmlAccessorType(XmlAccessType.NONE)\r\n    @XmlRootElement(name = \"users\")\r\n    @Path(\"/users\")\r\n    public class UserResource \r\n    {\r\n    \tprivate static Map<Integer, User> DB = new HashMap<>(); \r\n\r\n    \t@GET\r\n    \t@Produces(\"application/json\")\r\n    \tpublic Users getAllUsers() {\r\n    \t\tUsers users = new Users();\r\n    \t\tusers.setUsers(new ArrayList<>(DB.values()));\r\n    \t\treturn users;\r\n    \t}\r\n\r\n    \t@POST\r\n    \t@Consumes(\"application/json\")\r\n    \tpublic Response createUser(User user) throws URISyntaxException \r\n    \t{\r\n    \t\tif(user.getFirstName() == null || user.getLastName() == null) {\r\n    \t\t\treturn Response.status(400).entity(\"Please provide all mandatory inputs\").build();\r\n    \t\t}\r\n    \t\tuser.setId(DB.values().size()+1);\r\n    \t\tuser.setUri(\"/user-management/\"+user.getId());\r\n    \t\tDB.put(user.getId(), user);\r\n    \t\treturn Response.status(201).contentLocation(new URI(user.getUri())).build();\r\n    \t}\r\n\r\n    \t@GET\r\n    \t@Path(\"/{id}\")\r\n    \t@Produces(\"application/json\")\r\n    \tpublic Response getUserById(@PathParam(\"id\") int id) throws URISyntaxException \r\n    \t{\r\n    \t\tUser user = DB.get(id);\r\n    \t\tif(user == null) {\r\n    \t\t\treturn Response.status(404).build();\r\n    \t\t}\r\n    \t\treturn Response\r\n    \t\t\t\t.status(200)\r\n    \t\t\t\t.entity(user)\r\n    \t\t\t\t.contentLocation(new URI(\"/user-management/\"+id)).build();\r\n    \t}\r\n\r\n    \t@PUT\r\n    \t@Path(\"/{id}\")\r\n    \t@Consumes(\"application/json\")\r\n    \t@Produces(\"application/json\")\r\n    \tpublic Response updateUser(@PathParam(\"id\") int id, User user) throws URISyntaxException \r\n    \t{\r\n    \t\tUser temp = DB.get(id);\r\n    \t\tif(user == null) {\r\n    \t\t\treturn Response.status(404).build();\r\n    \t\t}\r\n    \t\ttemp.setFirstName(user.getFirstName());\r\n    \t\ttemp.setLastName(user.getLastName());\r\n    \t\tDB.put(temp.getId(), temp);\r\n    \t\treturn Response.status(200).entity(temp).build();\r\n    \t}\r\n\r\n    \t@DELETE\r\n    \t@Path(\"/{id}\")\r\n    \tpublic Response deleteUser(@PathParam(\"id\") int id)\tthrows URISyntaxException {\r\n    \t\tUser user = DB.get(id);\r\n    \t\tif(user != null) {\r\n    \t\t\tDB.remove(user.getId());\r\n    \t\t\treturn Response.status(200).build();\r\n    \t\t}\r\n    \t\treturn Response.status(404).build();\r\n    \t}\r\n\r\n    \tstatic \r\n    \t{\r\n    \t\tUser user1 = new User();\r\n    \t\tuser1.setId(1);\r\n    \t\tuser1.setFirstName(\"John\");\r\n    \t\tuser1.setLastName(\"Wick\");\r\n    \t\tuser1.setUri(\"/user-management/1\");\r\n\r\n    \t\tUser user2 = new User();\r\n    \t\tuser2.setId(2);\r\n    \t\tuser2.setFirstName(\"Harry\");\r\n    \t\tuser2.setLastName(\"Potter\");\r\n    \t\tuser2.setUri(\"/user-management/2\");\r\n\r\n    \t\tDB.put(user1.getId(), user1);\r\n    \t\tDB.put(user2.getId(), user2);\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.jerseydemo;\r\n\r\n    import java.util.ArrayList;\r\n    import javax.xml.bind.annotation.XmlAccessType;\r\n    import javax.xml.bind.annotation.XmlAccessorType;\r\n    import javax.xml.bind.annotation.XmlElement;\r\n    import javax.xml.bind.annotation.XmlRootElement;\r\n\r\n    @XmlAccessorType(XmlAccessType.NONE)\r\n    @XmlRootElement(name = \"users\")\r\n    public class Users {\r\n\r\n        @XmlElement(name=\"user\")\r\n        private ArrayList<User> users;\r\n\r\n        public ArrayList<User> getUsers() {\r\n            return users;\r\n        }\r\n\r\n        public void setUsers(ArrayList<User> users) {\r\n            this.users = users;\r\n        }\r\n    }\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.jerseydemo;\r\n\r\n    import java.io.Serializable;\r\n    import javax.xml.bind.annotation.XmlAccessType;\r\n    import javax.xml.bind.annotation.XmlAccessorType;\r\n    import javax.xml.bind.annotation.XmlAttribute;\r\n    import javax.xml.bind.annotation.XmlElement;\r\n    import javax.xml.bind.annotation.XmlRootElement;\r\n\r\n    @XmlAccessorType(XmlAccessType.NONE)\r\n    @XmlRootElement(name = \"user\")\r\n    public class User implements Serializable {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @XmlAttribute(name = \"id\")\r\n        private int id;\r\n\r\n        @XmlAttribute(name=\"uri\")\r\n        private String uri;\r\n\r\n        @XmlElement(name = \"firstName\")\r\n        private String firstName;\r\n\r\n        @XmlElement(name = \"lastName\")\r\n        private String lastName;\r\n\r\n        // Getters and Setters\r\n    }\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.jerseydemo;\r\n\r\n    import org.glassfish.jersey.server.ResourceConfig;\r\n    import org.springframework.stereotype.Component;\r\n\r\n    @Component\r\n    public class JerseyConfig extends ResourceConfig \r\n    {\r\n    \tpublic JerseyConfig() \r\n    \t{\r\n    \t\tregister(SecurityFilter.class);\r\n    \t\tregister(UserResource.class);\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\n    package com.howtodoinjava.jerseydemo;\r\n\r\n    import org.springframework.boot.autoconfigure.SpringBootApplication;\r\n    import org.springframework.boot.builder.SpringApplicationBuilder;\r\n    import org.springframework.boot.web.support.SpringBootServletInitializer;\r\n\r\n    @SpringBootApplication\r\n    public class JerseydemoApplication extends SpringBootServletInitializer \r\n    {\r\n    \tpublic static void main(String[] args) \r\n    \t{\r\n    \t\tnew JerseydemoApplication().configure(new SpringApplicationBuilder(JerseydemoApplication.class)).run(args);\r\n    \t}\r\n    }\r\n\r\n    ```","```java\r\npackage com.howtodoinjava.jerseydemo;\r\n\r\n@XmlAccessorType(XmlAccessType.NONE)\r\n@XmlRootElement(name = \"users\")\r\n@Path(\"/users\")\r\npublic class UserResource \r\n{\r\n\tprivate static Map<Integer, User> DB = new HashMap<>(); \r\n\r\n\t@GET\r\n\t@PermitAll\r\n\t@Produces(\"application/json\")\r\n\tpublic Users getAllUsers() {\r\n\t\tUsers users = new Users();\r\n\t\tusers.setUsers(new ArrayList<>(DB.values()));\r\n\t\treturn users;\r\n\t}\r\n\r\n\t@POST\r\n\t@Consumes(\"application/json\")\r\n\t@RolesAllowed(\"ADMIN\")\r\n\tpublic Response createUser(User user) throws URISyntaxException \r\n\t{\r\n\t\tif(user.getFirstName() == null || user.getLastName() == null) {\r\n\t\t\treturn Response.status(400).entity(\"Please provide all mandatory inputs\").build();\r\n\t\t}\r\n\t\tuser.setId(DB.values().size()+1);\r\n\t\tuser.setUri(\"/user-management/\"+user.getId());\r\n\t\tDB.put(user.getId(), user);\r\n\t\treturn Response.status(201).contentLocation(new URI(user.getUri())).build();\r\n\t}\r\n\r\n\t@GET\r\n\t@Path(\"/{id}\")\r\n\t@Produces(\"application/json\")\r\n\t@PermitAll\r\n\tpublic Response getUserById(@PathParam(\"id\") int id) throws URISyntaxException \r\n\t{\r\n\t\tUser user = DB.get(id);\r\n\t\tif(user == null) {\r\n\t\t\treturn Response.status(404).build();\r\n\t\t}\r\n\t\treturn Response\r\n\t\t\t\t.status(200)\r\n\t\t\t\t.entity(user)\r\n\t\t\t\t.contentLocation(new URI(\"/user-management/\"+id)).build();\r\n\t}\r\n\r\n\t@PUT\r\n\t@Path(\"/{id}\")\r\n\t@Consumes(\"application/json\")\r\n\t@Produces(\"application/json\")\r\n\t@RolesAllowed(\"ADMIN\")\r\n\tpublic Response updateUser(@PathParam(\"id\") int id, User user) throws URISyntaxException \r\n\t{\r\n\t\tUser temp = DB.get(id);\r\n\t\tif(user == null) {\r\n\t\t\treturn Response.status(404).build();\r\n\t\t}\r\n\t\ttemp.setFirstName(user.getFirstName());\r\n\t\ttemp.setLastName(user.getLastName());\r\n\t\tDB.put(temp.getId(), temp);\r\n\t\treturn Response.status(200).entity(temp).build();\r\n\t}\r\n\r\n\t@DELETE\r\n\t@Path(\"/{id}\")\r\n\t@RolesAllowed(\"ADMIN\")\r\n\tpublic Response deleteUser(@PathParam(\"id\") int id)\tthrows URISyntaxException {\r\n\t\tUser user = DB.get(id);\r\n\t\tif(user != null) {\r\n\t\t\tDB.remove(user.getId());\r\n\t\t\treturn Response.status(200).build();\r\n\t\t}\r\n\t\treturn Response.status(404).build();\r\n\t}\r\n\r\n\tstatic \r\n\t{\r\n\t\tUser user1 = new User();\r\n\t\tuser1.setId(1);\r\n\t\tuser1.setFirstName(\"John\");\r\n\t\tuser1.setLastName(\"Wick\");\r\n\t\tuser1.setUri(\"/user-management/1\");\r\n\r\n\t\tUser user2 = new User();\r\n\t\tuser2.setId(2);\r\n\t\tuser2.setFirstName(\"Harry\");\r\n\t\tuser2.setLastName(\"Potter\");\r\n\t\tuser2.setUri(\"/user-management/2\");\r\n\r\n\t\tDB.put(user1.getId(), user1);\r\n\t\tDB.put(user2.getId(), user2);\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.howtodoinjava.jerseydemo;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.Arrays;\r\nimport java.util.Base64;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.StringTokenizer;\r\n\r\nimport javax.annotation.security.DenyAll;\r\nimport javax.annotation.security.PermitAll;\r\nimport javax.annotation.security.RolesAllowed;\r\nimport javax.ws.rs.container.ContainerRequestContext;\r\nimport javax.ws.rs.container.ResourceInfo;\r\nimport javax.ws.rs.core.Context;\r\nimport javax.ws.rs.core.MultivaluedMap;\r\nimport javax.ws.rs.core.Response;\r\nimport javax.ws.rs.ext.Provider;\r\n\r\n/**\r\n * This filter verify the access permissions for a user based on \r\n * user name and password provided in request\r\n * */\r\n@Provider\r\npublic class SecurityFilter implements javax.ws.rs.container.ContainerRequestFilter\r\n{\r\n    private static final String AUTHORIZATION_PROPERTY = \"Authorization\";\r\n    private static final String AUTHENTICATION_SCHEME = \"Basic\";\r\n    private static final Response ACCESS_DENIED = Response.status(Response.Status.UNAUTHORIZED).build();\r\n    private static final Response ACCESS_FORBIDDEN = Response.status(Response.Status.FORBIDDEN).build();\r\n    private static final Response SERVER_ERROR = Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\r\n\r\n    @Context\r\n    private ResourceInfo resourceInfo;\r\n\r\n    @Override\r\n    public void filter(ContainerRequestContext requestContext)\r\n    {\r\n        Method method = resourceInfo.getResourceMethod();\r\n        //Access allowed for all \r\n        if( ! method.isAnnotationPresent(PermitAll.class))\r\n        {\r\n            //Access denied for all \r\n            if(method.isAnnotationPresent(DenyAll.class))\r\n            {\r\n                requestContext.abortWith(ACCESS_FORBIDDEN);\r\n                return;\r\n            }\r\n\r\n            //Get request headers\r\n            final MultivaluedMap<String, String> headers = requestContext.getHeaders();\r\n\r\n            //Fetch authorization header\r\n            final List<String> authorization = headers.get(AUTHORIZATION_PROPERTY);\r\n\r\n            //If no authorization information present; block access\r\n            if(authorization == null || authorization.isEmpty())\r\n            {\r\n                requestContext.abortWith(ACCESS_DENIED);\r\n                return;\r\n            }\r\n\r\n            //Get encoded username and password\r\n            final String encodedUserPassword = authorization.get(0).replaceFirst(AUTHENTICATION_SCHEME + \" \", \"\");\r\n\r\n            //Decode username and password\r\n            String usernameAndPassword = null;\r\n            try {\r\n                usernameAndPassword = new String(Base64.getDecoder().decode(encodedUserPassword));\r\n            } catch (Exception e) {\r\n                requestContext.abortWith(SERVER_ERROR);\r\n                return;\r\n            }\r\n\r\n            //Split username and password tokens\r\n            final StringTokenizer tokenizer = new StringTokenizer(usernameAndPassword, \":\");\r\n            final String username = tokenizer.nextToken();\r\n            final String password = tokenizer.nextToken();\r\n\r\n            //Verifying Username and password\r\n            if(!(username.equalsIgnoreCase(\"admin\") && password.equalsIgnoreCase(\"password\"))){\r\n            \trequestContext.abortWith(ACCESS_DENIED);\r\n                return;\r\n            }\r\n\r\n            //Verify user access\r\n            if(method.isAnnotationPresent(RolesAllowed.class))\r\n            {\r\n                RolesAllowed rolesAnnotation = method.getAnnotation(RolesAllowed.class);\r\n                Set<String> rolesSet = new HashSet<String>(Arrays.asList(rolesAnnotation.value()));\r\n\r\n                //Is user valid?\r\n                if( ! isUserAllowed(username, password, rolesSet))\r\n                {\r\n                    requestContext.abortWith(ACCESS_DENIED);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private boolean isUserAllowed(final String username, final String password, final Set<String> rolesSet) \r\n    {\r\n        boolean isAllowed = false;\r\n\r\n        //Step 1\\. Fetch password from database and match with password in argument\r\n        //If both match then get the defined role for user from database and continue; else return isAllowed [false]\r\n        //Access the database and do this part yourself\r\n        //String userRole = userMgr.getUserRole(username);\r\n        String userRole = \"ADMIN\";\r\n\r\n        //Step 2\\. Verify user role\r\n        if(rolesSet.contains(userRole))\r\n        {\r\n            isAllowed = true;\r\n        }\r\n        return isAllowed;\r\n    }\r\n}\r\n\r\n```"]