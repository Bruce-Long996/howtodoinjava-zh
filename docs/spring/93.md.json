["```java\nimport java.io.File;\n\nimport org.springframework.batch.core.StepContribution;\nimport org.springframework.batch.core.UnexpectedJobExecutionException;\nimport org.springframework.batch.core.scope.context.ChunkContext;\nimport org.springframework.batch.core.step.tasklet.Tasklet;\nimport org.springframework.batch.repeat.RepeatStatus;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.Assert;\n\npublic class FileDeletingTasklet implements Tasklet, InitializingBean {\n\n    private Resource[] resources;\n\n    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\n\n    \tfor(Resource r: resources) {\n    \t\tFile file = r.getFile();\n    \t\tboolean deleted = file.delete();\n            if (!deleted) {\n                throw new UnexpectedJobExecutionException(\"Could not delete file \" + file.getPath());\n            }\n    \t}\n        return RepeatStatus.FINISHED;\n    }\n\n    public void setResources(Resource[] resources) {\n        this.resources = resources;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        Assert.notNull(resources, \"directory must be set\");\n    }\n}\n\n```","```java\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.Step;\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\nimport org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\nimport org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\nimport org.springframework.batch.core.launch.support.RunIdIncrementer;\nimport org.springframework.batch.item.file.FlatFileItemReader;\nimport org.springframework.batch.item.file.MultiResourceItemReader;\nimport org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;\nimport org.springframework.batch.item.file.mapping.DefaultLineMapper;\nimport org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\nimport com.howtodoinjava.demo.model.Employee;\n\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfig\n{\n\t@Autowired\n\tprivate JobBuilderFactory jobBuilderFactory;\n\n\t@Autowired\n\tprivate StepBuilderFactory stepBuilderFactory;\n\n\t@Value(\"file:c:/temp/input/inputData*.csv\")\n\tprivate Resource[] inputResources;\n\n\t@Bean\n\tpublic Job readCSVFilesJob() {\n\t\treturn jobBuilderFactory\n\t\t\t\t.get(\"readCSVFilesJob\")\n\t\t\t\t.incrementer(new RunIdIncrementer())\n\t\t\t\t.start(step1())\n\t\t\t\t.next(step2())\n\t\t\t\t.build();\n\t}\n\n\t@Bean\n\tpublic Step step1() {\n\t\treturn stepBuilderFactory.get(\"step1\").<Employee, Employee>chunk(5)\n\t\t\t\t.reader(multiResourceItemReader())\n\t\t\t\t.writer(writer())\n\t\t\t\t.build();\n\t}\n\n\t@Bean\n    public Step step2() {\n\t\tFileDeletingTasklet task = new FileDeletingTasklet();\n\t\ttask.setResources(inputResources);\n        return stepBuilderFactory.get(\"step2\")\n        \t\t.tasklet(task)\n                .build();\n    }\n\n\t@Bean\n\tpublic MultiResourceItemReader<Employee> multiResourceItemReader()\n\t{\n\t\tMultiResourceItemReader<Employee> resourceItemReader = new MultiResourceItemReader<Employee>();\n\t\tresourceItemReader.setResources(inputResources);\n\t\tresourceItemReader.setDelegate(reader());\n\t\treturn resourceItemReader;\n\t}\n\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Bean\n\tpublic FlatFileItemReader<Employee> reader()\n\t{\n\t\t// Create reader instance\n\t\tFlatFileItemReader<Employee> reader = new FlatFileItemReader<Employee>();\n\t\t// Set number of lines to skips. Use it if file has header rows.\n\t\treader.setLinesToSkip(1);\n\t\t// Configure how each line will be parsed and mapped to different values\n\t\treader.setLineMapper(new DefaultLineMapper() {\n\t\t\t{\n\t\t\t\t// 3 columns in each row\n\t\t\t\tsetLineTokenizer(new DelimitedLineTokenizer() {\n\t\t\t\t\t{\n\t\t\t\t\t\tsetNames(new String[] { \"id\", \"firstName\", \"lastName\" });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// Set values in Employee class\n\t\t\t\tsetFieldSetMapper(new BeanWrapperFieldSetMapper<Employee>() {\n\t\t\t\t\t{\n\t\t\t\t\t\tsetTargetType(Employee.class);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn reader;\n\t}\n\n\t@Bean\n\tpublic ConsoleItemWriter<Employee> writer()\n\t{\n\t\treturn new ConsoleItemWriter<Employee>();\n\t}\n}\n\n```","```java\n2018-07-11 12:30:00 INFO  - Job: [SimpleJob: [name=readCSVFilesJob]] launched with the following parameters: [{JobID=1531292400004}]\n\n2018-07-11 12:30:00 INFO  - Executing step: [step1]\n\nEmployee [id=1, firstName=Lokesh, lastName=Gupta]\nEmployee [id=2, firstName=Amit, lastName=Mishra]\nEmployee [id=3, firstName=Pankaj, lastName=Kumar]\nEmployee [id=4, firstName=David, lastName=Miller]\nEmployee [id=5, firstName=Ramesh, lastName=Gupta]\nEmployee [id=6, firstName=Vineet, lastName=Mishra]\nEmployee [id=7, firstName=Amit, lastName=Kumar]\nEmployee [id=8, firstName=Dav, lastName=Miller]\nEmployee [id=9, firstName=Vikas, lastName=Kumar]\nEmployee [id=10, firstName=Pratek, lastName=Mishra]\nEmployee [id=11, firstName=Brian, lastName=Kumar]\nEmployee [id=12, firstName=David, lastName=Cena]\n\n2018-07-11 12:30:00 INFO  - Executing step: [step2]\n\nDeleted file :: c:\\temp\\input\\inputData1.csv\nDeleted file :: c:\\temp\\input\\inputData2.csv\nDeleted file :: c:\\temp\\input\\inputData3.csv\n\n2018-07-11 12:30:00 INFO  - Job: [SimpleJob: [name=readCSVFilesJob]] completed with the following parameters: [{JobID=1531292400004}] and the following status: [COMPLETED]\n\n```"]