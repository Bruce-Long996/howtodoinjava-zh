["```java\r\n    <dependency>\r\n    \t<groupId>org.springframework.cloud</groupId>\r\n    \t<artifactId>spring-cloud-starter-hystrix</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n    \t<groupId>org.springframework.cloud</groupId>\r\n    \t<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>\r\n    </dependency>\r\n\r\n    ```","```java\r\nserver.port = 8098\r\n```","```java\r\npackage com.example.howtodoinjava.springhystrixstudentservice.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport com.example.howtodoinjava.springhystrixstudentservice.domain.Student;\r\n\r\n@RestController\r\npublic class StudentServiceController {\r\n\r\n\tprivate static Map<String, List<Student>> schooDB = new HashMap<String, List<Student>>();\r\n\r\n\tstatic {\r\n\t\tschooDB = new HashMap<String, List<Student>>();\r\n\r\n\t\tList<Student> lst = new ArrayList<Student>();\r\n\t\tStudent std = new Student(\"Sajal\", \"Class IV\");\r\n\t\tlst.add(std);\r\n\t\tstd = new Student(\"Lokesh\", \"Class V\");\r\n\t\tlst.add(std);\r\n\r\n\t\tschooDB.put(\"abcschool\", lst);\r\n\r\n\t\tlst = new ArrayList<Student>();\r\n\t\tstd = new Student(\"Kajal\", \"Class III\");\r\n\t\tlst.add(std);\r\n\t\tstd = new Student(\"Sukesh\", \"Class VI\");\r\n\t\tlst.add(std);\r\n\r\n\t\tschooDB.put(\"xyzschool\", lst);\r\n\r\n\t}\r\n\r\n\t@RequestMapping(value = \"/getStudentDetailsForSchool/{schoolname}\", method = RequestMethod.GET)\r\n\tpublic List<Student> getStudents(@PathVariable String schoolname) {\r\n\t\tSystem.out.println(\"Getting Student details for \" + schoolname);\r\n\r\n\t\tList<Student> studentList = schooDB.get(schoolname);\r\n\t\tif (studentList == null) {\r\n\t\t\tstudentList = new ArrayList<Student>();\r\n\t\t\tStudent std = new Student(\"Not Found\", \"N/A\");\r\n\t\t\tstudentList.add(std);\r\n\t\t}\r\n\t\treturn studentList;\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.howtodoinjava.springhystrixstudentservice.domain;\r\n\r\npublic class Student {\r\n\r\n\tprivate String name;\r\n\tprivate String className;\r\n\r\n\tpublic Student(String name, String className) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.className = className;\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic String getClassName() {\r\n\t\treturn className;\r\n\t}\r\n\r\n\tpublic void setClassName(String className) {\r\n\t\tthis.className = className;\r\n\t}\r\n}\r\n\r\n```","```java\r\nserver.port = 9098\r\n```","```java\r\npackage com.example.howtodoinjava.springhystrixschoolservice;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;\r\nimport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\r\n\r\n@SpringBootApplication\r\n@EnableHystrixDashboard\r\n@EnableCircuitBreaker\r\npublic class SpringHystrixSchoolServiceApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(SpringHystrixSchoolServiceApplication.class, args);\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.howtodoinjava.springhystrixschoolservice.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport com.example.howtodoinjava.springhystrixschoolservice.delegate.StudentServiceDelegate;\r\n\r\n@RestController\r\npublic class SchoolServiceController {\r\n\r\n\t@Autowired\r\n\tStudentServiceDelegate studentServiceDelegate;\r\n\r\n\t@RequestMapping(value = \"/getSchoolDetails/{schoolname}\", method = RequestMethod.GET)\r\n\tpublic String getStudents(@PathVariable String schoolname) {\r\n\t\tSystem.out.println(\"Going to call student service to get data!\");\r\n\t\treturn studentServiceDelegate.callStudentServiceAndGetData(schoolname);\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.howtodoinjava.springhystrixschoolservice.delegate;\r\n\r\nimport java.util.Date;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.core.ParameterizedTypeReference;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.client.RestTemplate;\r\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\r\n\r\n@Service\r\npublic class StudentServiceDelegate {\r\n\r\n\t@Autowired\r\n\tRestTemplate restTemplate;\r\n\r\n\t@HystrixCommand(fallbackMethod = \"callStudentServiceAndGetData_Fallback\")\r\n\tpublic String callStudentServiceAndGetData(String schoolname) {\r\n\r\n\t\tSystem.out.println(\"Getting School details for \" + schoolname);\r\n\r\n\t\tString response = restTemplate\r\n\t\t\t\t.exchange(\"http://localhost:8098/getStudentDetailsForSchool/{schoolname}\"\r\n\t\t\t\t, HttpMethod.GET\r\n\t\t\t\t, null\r\n\t\t\t\t, new ParameterizedTypeReference<String>() {\r\n\t\t\t}, schoolname).getBody();\r\n\r\n\t\tSystem.out.println(\"Response Received as \" + response + \" -  \" + new Date());\r\n\r\n\t\treturn \"NORMAL FLOW !!! - School Name -  \" + schoolname + \" :::  \" +\r\n\t\t\t\t\t\" Student Details \" + response + \" -  \" + new Date();\r\n\t}\r\n\r\n\t@SuppressWarnings(\"unused\")\r\n\tprivate String callStudentServiceAndGetData_Fallback(String schoolname) {\r\n\r\n\t\tSystem.out.println(\"Student Service is down!!! fallback route enabled...\");\r\n\r\n\t\treturn \"CIRCUIT BREAKER ENABLED!!! No Response From Student Service at this moment. \" +\r\n\t\t\t\t\t\" Service will be back shortly - \" + new Date();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic RestTemplate restTemplate() {\r\n\t\treturn new RestTemplate();\r\n\t}\r\n}\r\n\r\n```"]