["```java\r\n<dependency>\r\n    <groupId>com.netflix.ribbon</groupId>\r\n    <artifactId>ribbon</artifactId>\r\n    <version>2.2.2</version>\r\n</dependency>\r\n\r\n```","```java\r\npackage com.example.ribbonserver;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class MyRestController {\r\n\r\n\t@Autowired\r\n\tEnvironment environment;\r\n\r\n\t@GetMapping(\"/\")\r\n\tpublic String health() {\r\n\t\treturn \"I am Ok\";\r\n\t}\r\n\r\n\t@GetMapping(\"/backend\")\r\n\tpublic String backend() {\r\n\t\tSystem.out.println(\"Inside MyRestController::backend...\");\r\n\r\n\t\tString serverPort = environment.getProperty(\"local.server.port\");\r\n\r\n\t\tSystem.out.println(\"Port : \" + serverPort);\r\n\r\n\t\treturn \"Hello form Backend!!! \" + \" Host : localhost \" + \" :: Port : \" + serverPort;\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.ribbonserver;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\n\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class RibbonServerApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(RibbonServerApplication.class, args);\r\n\t}\r\n}\r\n\r\n```","```java\r\nspring.application.name=server\r\nserver.port = 9090\r\n\r\neureka.client.serviceUrl.defaultZone= http://${registry.host:localhost}:${registry.port:8761}/eureka/\r\neureka.client.healthcheck.enabled= true\r\neureka.instance.leaseRenewalIntervalInSeconds= 1\r\neureka.instance.leaseExpirationDurationInSeconds= 2\r\n\r\n```","```java\r\npackage com.example.ribboneurekaserver;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\r\n\r\n@SpringBootApplication\r\n@EnableEurekaServer\r\npublic class RibbonEurekaServerApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(RibbonEurekaServerApplication.class, args);\r\n\t}\r\n}\r\n\r\n```","```java\r\nspring.application.name= ${springboot.app.name:eureka-serviceregistry}\r\nserver.port = ${server-port:8761}\r\neureka.instance.hostname= ${springboot.app.name:eureka-serviceregistry}\r\neureka.client.registerWithEureka= false\r\neureka.client.fetchRegistry= false\r\neureka.client.serviceUrl.defaultZone: http://${registry.host:localhost}:${server.port}/eureka/\r\n\r\n```","```java\r\npackage com.example.ribbonclient;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\nimport org.springframework.cloud.netflix.ribbon.RibbonClient;\r\n\r\n@EnableDiscoveryClient\r\n@SpringBootApplication\r\n@RibbonClient(name = \"server\", configuration = RibbonConfiguration.class)\r\npublic class RibbonClientApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(RibbonClientApplication.class, args);\r\n\t}\r\n}\r\n\r\n```","```java\r\nspring.application.name=client\r\nserver.port=8888\r\n\r\neureka.client.serviceUrl.defaultZone= http://${registry.host:localhost}:${registry.port:8761}/eureka/\r\neureka.client.healthcheck.enabled= true\r\neureka.instance.leaseRenewalIntervalInSeconds= 1\r\neureka.instance.leaseExpirationDurationInSeconds= 2\r\n\r\nserver.ribbon.eureka.enabled=true\r\n#server.ribbon.listOfServers=localhost:9090,localhost:9091,localhost:9092\r\nserver.ribbon.ServerListRefreshInterval=1000\r\n#logging.level.root=TRACE\r\n\r\n```","```java\r\npackage com.example.ribbonclient;\r\nimport com.netflix.client.config.IClientConfig;\r\nimport com.netflix.loadbalancer.AvailabilityFilteringRule;\r\nimport com.netflix.loadbalancer.IPing;\r\nimport com.netflix.loadbalancer.IRule;\r\nimport com.netflix.loadbalancer.PingUrl;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\npublic class RibbonConfiguration {\r\n\r\n    @Autowired\r\n    IClientConfig config;\r\n\r\n    @Bean\r\n    public IPing ribbonPing(IClientConfig config) {\r\n        return new PingUrl();\r\n    }\r\n\r\n    @Bean\r\n    public IRule ribbonRule(IClientConfig config) {\r\n        return new AvailabilityFilteringRule();\r\n    }\r\n}\r\n\r\n```","```java\r\nserver.ribbon.listOfServers=localhost:9090,localhost:9091,localhost:9092 \r\nserver.ribbon.eureka.enabled=false\r\n\r\n```"]