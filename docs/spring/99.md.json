["```java\r\npackage com.example.hoverflyactualservice;\r\n\r\nimport java.util.Date;\r\nimport java.util.UUID;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class HoverflyActualServiceApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(HoverflyActualServiceApplication.class, args);\r\n\t}\r\n}\r\n\r\n@RestController\r\nclass MyRestController {\r\n\r\n\t@RequestMapping(value = \"/service/hoverfly\")\r\n\tpublic HoverflyServiceResponse getSampleResponse() {\r\n\t\tSystem.out.println(\"Inside HoverflyActualServiceApplication::getSampleResponse()\");\r\n\t\treturn new HoverflyServiceResponse(\"returned value from HoverflyActualServiceApplication\", new Date().toString(), UUID.randomUUID().toString());\r\n\t}\r\n}\r\n\r\nclass HoverflyServiceResponse {\r\n\tprivate String message;\r\n\tprivate String responseTime;\r\n\tprivate String transactionid;\r\n\r\n\tpublic HoverflyServiceResponse(String message, String responseTime, String transactionid) {\r\n\t\tsuper();\r\n\t\tthis.message = message;\r\n\t\tthis.responseTime = responseTime;\r\n\t\tthis.transactionid = transactionid;\r\n\t}\r\n\r\n\tpublic String getMessage() {\r\n\t\treturn message;\r\n\t}\r\n\r\n\tpublic void setMessage(String message) {\r\n\t\tthis.message = message;\r\n\t}\r\n\r\n\tpublic String getResponseTime() {\r\n\t\treturn responseTime;\r\n\t}\r\n\r\n\tpublic void setResponseTime(String responseTime) {\r\n\t\tthis.responseTime = responseTime;\r\n\t}\r\n\r\n\tpublic String getTransactionid() {\r\n\t\treturn transactionid;\r\n\t}\r\n\r\n\tpublic void setTransactionid(String transactionid) {\r\n\t\tthis.transactionid = transactionid;\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.hoverflyactualserviceclient;\r\n\r\nimport java.net.InetSocketAddress;\r\nimport java.net.Proxy;\r\nimport java.net.Proxy.Type;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.core.ParameterizedTypeReference;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.http.client.SimpleClientHttpRequestFactory;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@SpringBootApplication\r\npublic class HoverflyActualServiceClientApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(HoverflyActualServiceClientApplication.class,\r\n\t\t\t\targs);\r\n\t}\r\n}\r\n\r\n@RestController\r\n\r\nclass TestController {\r\n\r\n\tprivate static final int HOVERFLY_PORT = 8500;\r\n\tprivate static final String HOVERFLY_HOST = \"localhost\";\r\n\tprivate static final String PROXY = \"proxy\";\r\n\r\n\t@RequestMapping(\"/invoke\")\r\n\tpublic String invoke() {\r\n\t\tSystem.out.println(\"inside TestController::invoke()\");\r\n\t\tString url = \"http://localhost:9080/service/hoverfly\";\r\n\t\tString response = restTemplate.exchange(url, HttpMethod.GET, null,\r\n\t\t\t\tnew ParameterizedTypeReference<String>() {\r\n\t\t\t\t}).getBody();\r\n\t\tSystem.out.println(\"Actual Response : \" + response);\r\n\t\treturn response;\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic RestTemplate restTemplate() {\r\n\r\n\t\tString mode = System.getProperty(\"mode\");\r\n\t\tSystem.out.println(\"##################### Mode ################# \" + mode);\r\n\r\n\t\tSimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();\r\n\t\tProxy proxy = new Proxy(Type.HTTP, new InetSocketAddress(HOVERFLY_HOST, HOVERFLY_PORT));\r\n\t\trequestFactory.setProxy(proxy);\r\n\t\tRestTemplate template = null;\r\n\r\n\t\tif (mode != null && mode.equalsIgnoreCase(PROXY)) {\r\n\t\t\tSystem.out.println(\"######### Running application in PROXY mode so \r\n\t\t\t\t\t\t\t\t\tthat we can use simulated hoverfly server!!!!\");\r\n\t\t\ttemplate = new RestTemplate(requestFactory);\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"######### Running application in PRODUCTION mode \r\n\t\t\t\t\t\t\t\t\tso that we can use simulated hoverfly server!!!!\");\r\n\t\t\ttemplate = new RestTemplate();\r\n\t\t}\r\n\r\n\t\treturn template;\r\n\t}\r\n\r\n\t@Autowired\r\n\tRestTemplate restTemplate;\r\n}\r\n\r\n```"]