["```java\n<aop:config> \n    <aop:aspect ref=\"loggingAspect\">\n        <aop:pointcut expression=\"execution(* com.howtodoinjava.app.service.impl.EmployeeManagerImpl.*(..))\" id=\"loggingPointcuts\"/>\n        <!-- after advice -->\n        <aop:after method=\"logAfterAllMethods\" pointcut-ref=\"loggingPointcuts\" /> \n    </aop:aspect> \n</aop:config>\n\n```","```java\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd;\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.howtodoinjava</groupId>\n    <artifactId>SpringAOPExamples</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>Spring AOP Examples</name>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>4.3.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>4.3.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>4.3.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjrt</artifactId>\n            <version>1.8.9</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.8.9</version>\n        </dependency>\n    </dependencies>\n</project>\n```","```java\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n    http://www.springframework.org/schema/aop\n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n\n    <aop:config> \n        <aop:aspect ref=\"loggingAspect\">\n            <aop:pointcut expression=\"execution(* com.howtodoinjava.app.service.impl.EmployeeManagerImpl.*(..))\" id=\"loggingPointcuts\"/>\n            <!-- after advice -->\n            <aop:after method=\"logAfterAllMethods\" pointcut-ref=\"loggingPointcuts\" />  \n        </aop:aspect> \n    </aop:config> \n\n    <!-- Employee manager -->\n    <bean id=\"employeeManager\" class=\"com.howtodoinjava.app.service.impl.EmployeeManagerImpl\" />\n\n    <!-- Logging Aspect -->\n    <bean id=\"loggingAspect\" class=\"com.howtodoinjava.app.aspect.LoggingAspect\" />\n\n</beans>\n\n```","```java\npublic interface EmployeeManager \n{\n    public EmployeeDTO getEmployeeById(Integer employeeId);\n\n    public List<EmployeeDTO> getAllEmployee();\n\n    public void createEmployee(EmployeeDTO employee);\n\n    public void deleteEmployee(Integer employeeId);\n\n    public void updateEmployee(EmployeeDTO employee);\n}\n\npublic class EmployeeManagerImpl implements EmployeeManager \n{\n    public EmployeeDTO getEmployeeById(Integer employeeId) \n    {\n        System.out.println(\"Method getEmployeeById() called\");\n        return new EmployeeDTO();\n    }\n\n    public List<EmployeeDTO> getAllEmployee() \n    {\n        System.out.println(\"Method getAllEmployee() called\");\n        return new ArrayList<EmployeeDTO>();\n    }\n\n    public void createEmployee(EmployeeDTO employee)\n    {\n        System.out.println(\"Method createEmployee() called\");\n    }\n\n    public void deleteEmployee(Integer employeeId) \n    {\n        System.out.println(\"Method deleteEmployee() called\");\n    }\n\n    public void updateEmployee(EmployeeDTO employee) \n    {\n        System.out.println(\"Method updateEmployee() called\");\n    }\n}\n\n```","```java\npackage com.howtodoinjava.app.aspect;\n\nimport org.aspectj.lang.JoinPoint;\n\npublic class LoggingAspect {\n\n    public void logAfterAllMethods(JoinPoint jp) throws Throwable \n    {\n        System.out.println(\"****LoggingAspect.logBeforeAllMethods() \" + jp.getSignature().getName());\n    }\n}\n\n```","```java\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.howtodoinjava.app.model.EmployeeDTO;\nimport com.howtodoinjava.app.service.EmployeeManager;\n\npublic class TestMain \n{\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) {\n\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        EmployeeManager manager = (EmployeeManager) context.getBean(\"employeeManager\");\n\n        manager.getEmployeeById(1);\n        manager.createEmployee(new EmployeeDTO());\n    }\n}\n\n```","```java\nMethod getEmployeeById() called\n\n****LoggingAspect.logBeforeAllMethods() getEmployeeById\n\nMethod createEmployee() called\n\n****LoggingAspect.logBeforeAllMethods() createEmployee\n\n```"]