["```java\r\n<dependency>\r\n\t<groupId>javax.validation</groupId>\r\n\t<artifactId>validation-api</artifactId>\r\n\t<version>1.0.0.GA</version>\r\n</dependency>\r\n\r\n```","```java\r\n<dependency>\r\n\t<groupId>org.hibernate</groupId>\r\n\t<artifactId>hibernate-validator</artifactId>\r\n\t<version>4.3.1.Final</version>\r\n</dependency>\r\n\r\n```","```java\r\npackage com.howtodoinjava.demo.model;\r\n\r\nimport java.io.Serializable;\r\n\r\nimport javax.validation.constraints.Pattern;\r\nimport javax.validation.constraints.Size;\r\n\r\npublic class EmployeeVO implements Serializable \r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tprivate Integer id;\r\n\r\n\t@Size(min = 3, max = 20)\r\n\tprivate String firstName;\r\n\r\n\t@Size(min = 3, max = 20)\r\n\tprivate String lastName;\r\n\r\n\t@Pattern(regexp=\".+@.+\\\\.[a-z]+\")\r\n\tprivate String email;\r\n\r\n\t//Setters and Getters\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"EmployeeVO [id=\" + id + \", firstName=\" + firstName\r\n\t\t\t\t+ \", lastName=\" + lastName + \", email=\" + email + \"]\";\r\n\t}\r\n}\r\n\r\n```","```java\r\nprivate Validator validator;\r\n\r\n```","```java\r\n@RequestMapping(method = RequestMethod.POST)\r\npublic String submitForm(@ModelAttribute(\"employee\") EmployeeVO employeeVO,\r\n\t\tBindingResult result, SessionStatus status) {\r\n\r\n\tSet<ConstraintViolation<EmployeeVO>> violations = validator.validate(employeeVO);\r\n\r\n\tfor (ConstraintViolation<EmployeeVO> violation : violations) \r\n\t{\r\n\t\tString propertyPath = violation.getPropertyPath().toString();\r\n\t\tString message = violation.getMessage();\r\n\t\t// Add JSR-303 errors to BindingResult\r\n\t\t// This allows Spring to display them in view via a FieldError\r\n\t\tresult.addError(new FieldError(\"employee\",propertyPath,\r\n\r\n\t\t\t\t\t\t\t   \"Invalid \"+ propertyPath + \"(\" + message + \")\"));\r\n\t}\r\n\r\n\tif (result.hasErrors()) {\r\n\t\treturn \"addEmployee\";\r\n\t}\r\n\t// Store the employee information in database\r\n\t// manager.createNewRecord(employeeVO);\r\n\r\n\t// Mark Session Complete\r\n\tstatus.setComplete();\r\n\treturn \"redirect:addNew/success\";\r\n}\r\n\r\n```","```java\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<groupId>com.howtodoinjava.demo</groupId>\r\n\t<artifactId>springmvcexample</artifactId>\r\n\t<packaging>war</packaging>\r\n\t<version>1.0-SNAPSHOT</version>\r\n\t<name>springmvcexample Maven Webapp</name>\r\n\t<url>http://maven.apache.org</url>\r\n\t<dependencies>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>junit</groupId>\r\n\t\t\t<artifactId>junit</artifactId>\r\n\t\t\t<version>4.12</version>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- Spring MVC support -->\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework</groupId>\r\n\t\t\t<artifactId>spring-webmvc</artifactId>\r\n\t\t\t<version>4.1.4.RELEASE</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework</groupId>\r\n\t\t\t<artifactId>spring-web</artifactId>\r\n\t\t\t<version>4.1.4.RELEASE</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- Tag libs support for view layer -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>javax.servlet</groupId>\r\n\t\t\t<artifactId>jstl</artifactId>\r\n\t\t\t<version>1.2</version>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>taglibs</groupId>\r\n\t\t\t<artifactId>standard</artifactId>\r\n\t\t\t<version>1.1.2</version>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- JSR 303 Dependencies -->\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>javax.validation</groupId>\r\n\t\t\t<artifactId>validation-api</artifactId>\r\n\t\t\t<version>1.0.0.GA</version>\r\n\t\t</dependency>\r\n\r\n\t\t\t<dependency>\r\n\t\t\t\t<groupId>org.hibernate</groupId>\r\n\t\t\t\t<artifactId>hibernate-validator</artifactId>\r\n\t\t\t\t<version>4.3.1.Final</version>\r\n\t\t\t</dependency>\r\n\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<finalName>springmvcexample</finalName>\r\n\t</build>\r\n</project>\r\n\r\n```","```java\r\npackage com.howtodoinjava.demo.controller;\r\n\r\nimport java.util.Set;\r\n\r\nimport javax.validation.ConstraintViolation;\r\nimport javax.validation.Validation;\r\nimport javax.validation.Validator;\r\nimport javax.validation.ValidatorFactory;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.validation.FieldError;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.SessionAttributes;\r\nimport org.springframework.web.bind.support.SessionStatus;\r\n\r\nimport com.howtodoinjava.demo.model.EmployeeVO;\r\nimport com.howtodoinjava.demo.service.EmployeeManager;\r\n\r\n@Controller\r\n@RequestMapping(\"/employee-module/addNew\")\r\n@SessionAttributes(\"employee\")\r\npublic class EmployeeController {\r\n\t@Autowired\r\n\tEmployeeManager manager;\r\n\r\n\tprivate Validator validator;\r\n\r\n\tpublic EmployeeController()\r\n\t{\r\n\t\tValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\r\n\t\tvalidator = validatorFactory.getValidator();\r\n\t}\r\n\r\n\t@RequestMapping(method = RequestMethod.GET)\r\n\tpublic String setupForm(Model model) {\r\n\t\tEmployeeVO employeeVO = new EmployeeVO();\r\n\t\tmodel.addAttribute(\"employee\", employeeVO);\r\n\t\treturn \"addEmployee\";\r\n\t}\r\n\r\n\t@RequestMapping(method = RequestMethod.POST)\r\n\tpublic String submitForm(@ModelAttribute(\"employee\") EmployeeVO employeeVO,\r\n\t\t\tBindingResult result, SessionStatus status) {\r\n\r\n\t\tSet<ConstraintViolation<EmployeeVO>> violations = validator.validate(employeeVO);\r\n\r\n\t\tfor (ConstraintViolation<EmployeeVO> violation : violations) \r\n\t\t{\r\n            String propertyPath = violation.getPropertyPath().toString();\r\n            String message = violation.getMessage();\r\n            // Add JSR-303 errors to BindingResult\r\n            // This allows Spring to display them in view via a FieldError\r\n            result.addError(new FieldError(\"employee\",propertyPath,\r\n\r\n                                   \"Invalid \"+ propertyPath + \"(\" + message + \")\"));\r\n        }\r\n\r\n\t\tif (result.hasErrors()) {\r\n\t\t\treturn \"addEmployee\";\r\n\t\t}\r\n\t\t// Store the employee information in database\r\n\t\t// manager.createNewRecord(employeeVO);\r\n\r\n\t\t// Mark Session Complete\r\n\t\tstatus.setComplete();\r\n\t\treturn \"redirect:addNew/success\";\r\n\t}\r\n\r\n\t@RequestMapping(value = \"/success\", method = RequestMethod.GET)\r\n\tpublic String success(Model model) {\r\n\t\treturn \"addSuccess\";\r\n\t}\r\n}\r\n\r\n```"]