["```java\r\npublic class EmployeeEvent extends ApplicationEvent\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tprivate String eventType;\r\n\tprivate EmployeeDTO employee;\r\n\r\n\t//Constructor's first parameter must be source\r\n\tpublic EmployeeEvent(Object source, String eventType, EmployeeDTO employee) \r\n\t{\r\n\t\t//Calling this super class constructor is necessary\r\n\t\tsuper(source);\r\n\t\tthis.eventType = eventType;\r\n\t\tthis.employee = employee;\r\n\t}\r\n\r\n\tpublic String getEventType() {\r\n\t\treturn eventType;\r\n\t}\r\n\r\n\tpublic EmployeeDTO getEmployee() {\r\n\t\treturn employee;\r\n\t}\r\n}\r\n\r\n```","```java\r\n@Service (\"employeeManager\")\r\npublic class EmployeeManagerImpl implements EmployeeManager, ApplicationEventPublisherAware\r\n{\r\n\t@Autowired\r\n\tprivate EmployeeDAO dao;\r\n\r\n\tprivate ApplicationEventPublisher publisher;\r\n\r\n\t//You must override this method; It will give you acces to ApplicationEventPublisher\r\n\tpublic void setApplicationEventPublisher(ApplicationEventPublisher publisher) {\r\n\t\tthis.publisher = publisher;\r\n\t}\r\n\r\n\tpublic EmployeeDTO createNewEmployee()\r\n\t{\r\n\t\tEmployeeDTO employee =  dao.createNewEmployee();\r\n\r\n\t\t//publishing the veent here\r\n\t\tpublisher.publishEvent(new EmployeeEvent(this, \"ADD\", employee));\r\n\r\n\t\treturn employee;\r\n\t}\r\n}\r\n\r\n```","```java\r\npublic class UserEventsProcessor implements ApplicationListener<EmployeeEvent> \r\n{\r\n\tpublic void onApplicationEvent(EmployeeEvent event) \r\n\t{\r\n\t\tEmployeeEvent employeeEvent = (EmployeeEvent) event;\r\n\r\n\t\tSystem.out.println(\"Employee \" + employeeEvent.getEventType() \r\n                          + \" with details : \" + employeeEvent.getEmployee());\r\n\r\n\t\t// Do more processing as per application logic\r\n\t}\r\n}\r\n\r\n```","```java\r\n<context:component-scan base-package=\"com.howtodoinjava.demo\" />\r\n\r\n<bean class=\"com.howtodoinjava.demo.processors.UserEventsProcessor\" />\r\n\r\n```","```java\r\npublic class TestSpringContext \r\n{\r\n\t@SuppressWarnings(\"resource\")\r\n\tpublic static void main(String[] args) throws Exception \r\n\t{\r\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\r\n\r\n\t\tEmployeeController controller = context.getBean(EmployeeController.class);\r\n\r\n\t\tcontroller.createNewEmployee();\r\n\t}\r\n}\r\n\r\n```","```java\r\nINFO: Loading XML bean definitions from class path resource [applicationContext.xml]\r\nEmployee ADD with details : Employee [id=1, firstName=Lokesh, lastName=Gupta, type=null]\r\n\r\n```","```java\r\npublic class EmployeeDTO \r\n{\r\n\tprivate Integer id;\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\tprivate String designation;\r\n\r\n\tpublic EmployeeDTO(String designation) \r\n\t{\r\n\t\tthis.id = -1;\r\n\t\tthis.firstName = \"dummy\";\r\n\t\tthis.lastName = \"dummy\";\r\n\t\tthis.designation = designation;\r\n\t}\r\n\r\n\tpublic EmployeeDTO() {\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\t//Setters and Getters\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"Employee [id=\" + id + \", firstName=\" + firstName\r\n\t\t\t\t+ \", lastName=\" + lastName + \", type=\" + designation + \"]\";\r\n\t}\r\n}\r\n\r\n```","```java\r\npublic interface EmployeeDAO \r\n{\r\n\tpublic EmployeeDTO createNewEmployee();\r\n}\r\n\r\n```","```java\r\n@Repository (\"employeeDao\")\r\npublic class EmployeeDAOImpl implements EmployeeDAO\r\n{\r\n\tpublic EmployeeDTO createNewEmployee()\r\n\t{\r\n\t\tEmployeeDTO e = new EmployeeDTO();\r\n\t\te.setId(1);\r\n\t\te.setFirstName(\"Lokesh\");\r\n\t\te.setLastName(\"Gupta\");\r\n\t\treturn e;\r\n\t}\r\n\r\n\tpublic void initBean() {\r\n\t\tSystem.out.println(\"Init Bean for : EmployeeDAOImpl\");\r\n\t}\r\n\r\n\tpublic void destroyBean() {\r\n\t\tSystem.out.println(\"Init Bean for : EmployeeDAOImpl\");\r\n\t}\r\n}\r\n\r\n```","```java\r\npublic interface EmployeeManager \r\n{\r\n\tpublic EmployeeDTO createNewEmployee();\r\n}\r\n\r\n```"]