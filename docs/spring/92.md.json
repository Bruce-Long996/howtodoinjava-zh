["```java\r\n@Value(\"input/inputData*.csv\")\r\nprivate Resource[] inputResources;\r\n\r\n@Bean\r\npublic Job readCSVFilesJob() {\r\n\treturn jobBuilderFactory\r\n\t\t\t.get(\"readCSVFilesJob\")\r\n\t\t\t.incrementer(new RunIdIncrementer())\r\n\t\t\t.start(step1())\r\n\t\t\t.build();\r\n}\r\n\r\n@Bean\r\npublic Step step1() {\r\n\treturn stepBuilderFactory.get(\"step1\").<Employee, Employee>chunk(5)\r\n\t\t\t.reader(multiResourceItemReader())\r\n\t\t\t.writer(writer())\r\n\t\t\t.build();\r\n}\r\n\r\n@Bean\r\npublic MultiResourceItemReader<Employee> multiResourceItemReader() \r\n{\r\n\tMultiResourceItemReader<Employee> resourceItemReader = new MultiResourceItemReader<Employee>();\r\n\tresourceItemReader.setResources(inputResources);\r\n\tresourceItemReader.setDelegate(reader());\r\n\treturn resourceItemReader;\r\n}\r\n\r\n@Bean\r\npublic FlatFileItemReader<Employee> reader() \r\n{\r\n\t//Create reader instance\r\n\tFlatFileItemReader<Employee> reader = new FlatFileItemReader<Employee>();\r\n\r\n\t//Set number of lines to skips. Use it if file has header rows.\r\n\treader.setLinesToSkip(1); \t\r\n\r\n\t//Configure how each line will be parsed and mapped to different values\r\n\treader.setLineMapper(new DefaultLineMapper() {\r\n\t\t{\r\n\t\t\t//3 columns in each row\r\n\t\t\tsetLineTokenizer(new DelimitedLineTokenizer() {\r\n\t\t\t\t{\r\n\t\t\t\t\tsetNames(new String[] { \"id\", \"firstName\", \"lastName\" });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//Set values in Employee class\r\n\t\t\tsetFieldSetMapper(new BeanWrapperFieldSetMapper<Employee>() {\r\n\t\t\t\t{\r\n\t\t\t\t\tsetTargetType(Employee.class);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\treturn reader;\r\n}\r\n\r\n```","```java\r\npublic class Employee {\r\n\r\n\tString id;\r\n\tString firstName;\r\n\tString lastName;\r\n\r\n\t//public setter and getter methods\r\n}\r\n\r\n```","```java\r\nid,firstName,lastName\r\n1,Lokesh,Gupta\r\n2,Amit,Mishra\r\n3,Pankaj,Kumar\r\n4,David,Miller\r\n\r\n```","```java\r\nid,firstName,lastName\r\n5,Ramesh,Gupta\r\n6,Vineet,Mishra\r\n7,Amit,Kumar\r\n8,Dav,Miller\r\n\r\n```","```java\r\nid,firstName,lastName\r\n9,Vikas,Kumar\r\n10,Pratek,Mishra\r\n11,Brian,Kumar\r\n12,David,Cena\r\n\r\n```","```java\r\nimport java.util.List;\r\n\r\nimport org.springframework.batch.item.ItemWriter;\r\n\r\npublic class ConsoleItemWriter<T> implements ItemWriter<T> { \r\n    @Override \r\n    public void write(List<? extends T> items) throws Exception { \r\n        for (T item : items) { \r\n            System.out.println(item); \r\n        } \r\n    } \r\n}\r\n\r\n```","```java\r\n@Bean\r\npublic ConsoleItemWriter<Employee> writer() \r\n{\r\n\treturn new ConsoleItemWriter<Employee>();\r\n}\r\n\r\n```","```java\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd;\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\r\n\t<groupId>com.howtodoinjava</groupId>\r\n\t<artifactId>App</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<packaging>jar</packaging>\r\n\r\n\t<name>App</name>\r\n\t<url>http://maven.apache.org</url>\r\n\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.0.3.RELEASE</version>\r\n\t</parent>\r\n\r\n\t<properties>\r\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-batch</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.h2database</groupId>\r\n\t\t\t<artifactId>h2</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n\t<repositories>\r\n\t\t<repository>\r\n\t\t\t<id>repository.spring.release</id>\r\n\t\t\t<name>Spring GA Repository</name>\r\n\t\t\t<url>http://repo.spring.io/release</url>\r\n\t\t</repository>\r\n\t</repositories>\r\n</project>\r\n\r\n```","```java\r\npackage com.howtodoinjava.demo.config;\r\n\r\nimport org.springframework.batch.core.Job;\r\nimport org.springframework.batch.core.Step;\r\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\r\nimport org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\r\nimport org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\r\nimport org.springframework.batch.core.launch.support.RunIdIncrementer;\r\nimport org.springframework.batch.item.file.FlatFileItemReader;\r\nimport org.springframework.batch.item.file.MultiResourceItemReader;\r\nimport org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;\r\nimport org.springframework.batch.item.file.mapping.DefaultLineMapper;\r\nimport org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.io.Resource;\r\n\r\nimport com.howtodoinjava.demo.model.Employee;\r\n\r\n@Configuration\r\n@EnableBatchProcessing\r\npublic class BatchConfig \r\n{\r\n\t@Autowired\r\n\tprivate JobBuilderFactory jobBuilderFactory;\r\n\r\n\t@Autowired\r\n\tprivate StepBuilderFactory stepBuilderFactory;\r\n\r\n\t@Value(\"input/inputData*.csv\")\r\n\tprivate Resource[] inputResources;\r\n\r\n\t@Bean\r\n\tpublic Job readCSVFilesJob() {\r\n\t\treturn jobBuilderFactory\r\n\t\t\t\t.get(\"readCSVFilesJob\")\r\n\t\t\t\t.incrementer(new RunIdIncrementer())\r\n\t\t\t\t.start(step1())\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic Step step1() {\r\n\t\treturn stepBuilderFactory.get(\"step1\").<Employee, Employee>chunk(5)\r\n\t\t\t\t.reader(multiResourceItemReader())\r\n\t\t\t\t.writer(writer())\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic MultiResourceItemReader<Employee> multiResourceItemReader() \r\n\t{\r\n\t\tMultiResourceItemReader<Employee> resourceItemReader = new MultiResourceItemReader<Employee>();\r\n\t\tresourceItemReader.setResources(inputResources);\r\n\t\tresourceItemReader.setDelegate(reader());\r\n\t\treturn resourceItemReader;\r\n\t}\r\n\r\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\n\t@Bean\r\n\tpublic FlatFileItemReader<Employee> reader() \r\n\t{\r\n\t\t//Create reader instance\r\n\t\tFlatFileItemReader<Employee> reader = new FlatFileItemReader<Employee>();\r\n\r\n\t\t//Set number of lines to skips. Use it if file has header rows.\r\n\t\treader.setLinesToSkip(1); \t\r\n\r\n\t\t//Configure how each line will be parsed and mapped to different values\r\n\t\treader.setLineMapper(new DefaultLineMapper() {\r\n\t\t\t{\r\n\t\t\t\t//3 columns in each row\r\n\t\t\t\tsetLineTokenizer(new DelimitedLineTokenizer() {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsetNames(new String[] { \"id\", \"firstName\", \"lastName\" });\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t//Set values in Employee class\r\n\t\t\t\tsetFieldSetMapper(new BeanWrapperFieldSetMapper<Employee>() {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsetTargetType(Employee.class);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn reader;\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic ConsoleItemWriter<Employee> writer() \r\n\t{\r\n\t\treturn new ConsoleItemWriter<Employee>();\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.howtodoinjava.demo;\r\n\r\nimport org.springframework.batch.core.Job;\r\nimport org.springframework.batch.core.JobParameters;\r\nimport org.springframework.batch.core.JobParametersBuilder;\r\nimport org.springframework.batch.core.launch.JobLauncher;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.scheduling.annotation.EnableScheduling;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\n\r\n@SpringBootApplication\r\n@EnableScheduling\r\npublic class App\r\n{\r\n    @Autowired\r\n    JobLauncher jobLauncher;\r\n\r\n    @Autowired\r\n    Job job;\r\n\r\n    public static void main(String[] args)\r\n    {\r\n        SpringApplication.run(App.class, args);\r\n    }\r\n\r\n    @Scheduled(cron = \"0 */1 * * * ?\")\r\n    public void perform() throws Exception\r\n    {\r\n        JobParameters params = new JobParametersBuilder()\r\n                .addString(\"JobID\", String.valueOf(System.currentTimeMillis()))\r\n                .toJobParameters();\r\n        jobLauncher.run(job, params);\r\n    }\r\n}\r\n\r\n```","```java\r\n#Disable batch job's auto start \r\nspring.batch.job.enabled=false\r\n\r\nspring.main.banner-mode=off\r\n\r\n```","```java\r\n2018-07-10 15:32:26 INFO  - Starting App on XYZ with PID 4596 (C:\\Users\\user\\workspace\\App\\target\\classes started by zkpkhua in C:\\Users\\user\\workspace\\App)\r\n2018-07-10 15:32:26 INFO  - No active profile set, falling back to default profiles: default\r\n2018-07-10 15:32:27 INFO  - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@3c9d0b9d: startup date [Tue Jul 10 15:32:27 IST 2018]; root of context hierarchy\r\n2018-07-10 15:32:28 INFO  - HikariPool-1 - Starting...\r\n2018-07-10 15:32:29 INFO  - HikariPool-1 - Start completed.\r\n2018-07-10 15:32:29 INFO  - No database type set, using meta data indicating: H2\r\n2018-07-10 15:32:29 INFO  - No TaskExecutor has been set, defaulting to synchronous executor.\r\n2018-07-10 15:32:29 INFO  - Executing SQL script from class path resource [org/springframework/batch/core/schema-h2.sql]\r\n2018-07-10 15:32:29 INFO  - Executed SQL script from class path resource [org/springframework/batch/core/schema-h2.sql] in 68 ms.\r\n2018-07-10 15:32:30 INFO  - Registering beans for JMX exposure on startup\r\n2018-07-10 15:32:30 INFO  - Bean with name 'dataSource' has been autodetected for JMX exposure\r\n2018-07-10 15:32:30 INFO  - Located MBean 'dataSource': registering with JMX server as MBean [com.zaxxer.hikari:name=dataSource,type=HikariDataSource]\r\n2018-07-10 15:32:30 INFO  - No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\r\n2018-07-10 15:32:30 INFO  - Started App in 4.036 seconds (JVM running for 4.827)\r\n\r\n2018-07-10 15:33:00 INFO  - Job: [SimpleJob: [name=readCSVFilesJob]] launched with the following parameters: [{JobID=1531216980005}]\r\n\r\n2018-07-10 15:33:00 INFO  - Executing step: [step1]\r\n\r\nEmployee [id=1, firstName=Lokesh, lastName=Gupta]\r\nEmployee [id=2, firstName=Amit, lastName=Mishra]\r\nEmployee [id=3, firstName=Pankaj, lastName=Kumar]\r\nEmployee [id=4, firstName=David, lastName=Miller]\r\nEmployee [id=5, firstName=Ramesh, lastName=Gupta]\r\nEmployee [id=6, firstName=Vineet, lastName=Mishra]\r\nEmployee [id=7, firstName=Amit, lastName=Kumar]\r\nEmployee [id=8, firstName=Dav, lastName=Miller]\r\nEmployee [id=9, firstName=Vikas, lastName=Kumar]\r\nEmployee [id=10, firstName=Pratek, lastName=Mishra]\r\nEmployee [id=11, firstName=Brian, lastName=Kumar]\r\nEmployee [id=12, firstName=David, lastName=Cena]\r\n\r\n2018-07-10 15:33:00 INFO  - Job: [SimpleJob: [name=readCSVFilesJob]] completed with the following parameters: [{JobID=1531216980005}] and the following status: [COMPLETED]\r\n\r\n```"]