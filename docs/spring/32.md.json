["```java\r\n    ApplicationContext context = new ClassPathXmlApplicationContext(“bean.xml”);\r\n    ```","```java\r\n    ApplicationContext context = new FileSystemXmlApplicationContext(“bean.xml”);\r\n    ```","```java\r\n<beans>\r\n\r\n\t<!-- JSON Support -->\r\n\t<bean name=\"viewResolver\" class=\"org.springframework.web.servlet.view.BeanNameViewResolver\"/>\r\n\t<bean name=\"jsonTemplate\" class=\"org.springframework.web.servlet.view.json.MappingJackson2JsonView\"/>\r\n\r\n\t<bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\"/>\r\n\r\n</beans>\r\n\r\n```","```java\r\n<web-app>\r\n  <display-name>Archetype Created Web Application</display-name>\r\n\r\n  <servlet>\r\n\t\t<servlet-name>spring</servlet-name>\r\n\t\t\t<servlet-class>\r\n\t\t\t\torg.springframework.web.servlet.DispatcherServlet\r\n\t\t\t</servlet-class>\r\n\t\t<load-on-startup>1</load-on-startup>\r\n\t</servlet>\r\n\r\n\t<servlet-mapping>\r\n\t\t<servlet-name>spring</servlet-name>\r\n\t\t<url-pattern>/</url-pattern>\r\n\t</servlet-mapping>\r\n\r\n</web-app>\r\n\r\n```","```java\r\n@Configuration\r\npublic class AppConfig \r\n{\r\n    @Bean\r\n    public MyService myService() {\r\n        return new MyServiceImpl();\r\n    }\r\n}\r\n\r\n```","```java\r\n<beans>\r\n    <bean id=\"myService\" class=\"com.howtodoinjava.services.MyServiceImpl\"/>\r\n</beans>\r\n\r\n```","```java\r\npublic static void main(String[] args) {\r\n    ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);\r\n    MyService myService = ctx.getBean(MyService.class);\r\n    myService.doStuff();\r\n}\r\n\r\n```","```java\r\n@Configuration\r\n@ComponentScan(basePackages = \"com.howtodoinjava\")\r\npublic class AppConfig  {\r\n    ...\r\n}\r\n\r\n```","```java\r\n<web-app>\r\n    <!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext instead of the default XmlWebApplicationContext -->\r\n    <context-param>\r\n        <param-name>contextClass</param-name>\r\n        <param-value>\r\n            org.springframework.web.context.support.AnnotationConfigWebApplicationContext\r\n        </param-value>\r\n    </context-param>\r\n\r\n    <!-- Configuration locations must consist of one or more comma- or space-delimited fully-qualified @Configuration classes. Fully-qualified packages may also be specified for component-scanning -->\r\n    <context-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>com.howtodoinjava.AppConfig</param-value>\r\n    </context-param>\r\n\r\n    <!-- Bootstrap the root application context as usual using ContextLoaderListener -->\r\n    <listener>\r\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n    </listener>\r\n\r\n    <!-- Declare a Spring MVC DispatcherServlet as usual -->\r\n    <servlet>\r\n        <servlet-name>dispatcher</servlet-name>\r\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n        <!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext instead of the default XmlWebApplicationContext -->\r\n        <init-param>\r\n            <param-name>contextClass</param-name>\r\n            <param-value>\r\n                org.springframework.web.context.support.AnnotationConfigWebApplicationContext\r\n            </param-value>\r\n        </init-param>\r\n        <!-- Again, config locations must consist of one or more comma- or space-delimited and fully-qualified @Configuration classes -->\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>com.howtodoinjava.web.MvcConfig</param-value>\r\n        </init-param>\r\n    </servlet>\r\n\r\n    <!-- map all requests for /app/* to the dispatcher servlet -->\r\n    <servlet-mapping>\r\n        <servlet-name>dispatcher</servlet-name>\r\n        <url-pattern>/app/*</url-pattern>\r\n    </servlet-mapping>\r\n</web-app>\r\n\r\n```","```java\r\n<beans>\r\n\r\n   <context:annotation-config/>\r\n   <!-- bean definitions go here -->\r\n\r\n</beans>\r\n\r\n```","```java\r\n<beans>\r\n    <bean id=\"demoBean\" class=\"com.howtodoinjava.task.DemoBean\" init-method=\"customInit\" destroy-method=\"customDestroy\"></bean>\r\n</beans>\r\n\r\n```","```java\r\npublic class Customer \r\n{\r\n\tprivate Person person;\r\n\r\n\t//Setters and Getters\r\n}\r\n\r\n```","```java\r\npublic class Person \r\n{\r\n\tprivate String name;\r\n\tprivate String address;\r\n\tprivate int age;\r\n\r\n\t//Setters and Getters\r\n}\r\n\r\n```","```java\r\n<bean id=\"CustomerBean\" class=\"com.howtodoinjava.common.Customer\">\r\n\t<property name=\"person\">\r\n\t\t<!-- This is inner bean -->\r\n\t\t<bean class=\"com.howtodoinjava.common.Person\">\r\n\t\t\t<property name=\"name\" value=\"adminis\"></property>\r\n\t\t\t<property name=\"address\" value=\"India\"></property>\r\n\t\t\t<property name=\"age\" value=\"34\"></property>\r\n\t\t</bean>\r\n\t</property>\r\n</bean>\r\n\r\n```","```java\r\n<beans>\r\n\r\n   <!-- Definition for javaCollection -->\r\n   <bean id=\"javaCollection\" class=\"com.howtodoinjava.JavaCollection\">\r\n\r\n      <!-- java.util.List -->\r\n      <property name=\"customList\">\r\n        <list>\r\n           <value>INDIA</value>\r\n           <value>Pakistan</value>\r\n           <value>USA</value>\r\n           <value>UK</value>\r\n        </list>\r\n      </property>\r\n\r\n     <!-- java.util.Set -->\r\n     <property name=\"customSet\">\r\n        <set>\r\n           <value>INDIA</value>\r\n           <value>Pakistan</value>\r\n           <value>USA</value>\r\n           <value>UK</value>\r\n        </set>\r\n      </property>\r\n\r\n     <!-- java.util.Map -->\r\n     <property name=\"customMap\">\r\n\r\n\t\t<map>\r\n           <entry key=\"1\" value=\"INDIA\"/>\r\n           <entry key=\"2\" value=\"Pakistan\"/>\r\n           <entry key=\"3\" value=\"USA\"/>\r\n           <entry key=\"4\" value=\"UK\"/>\r\n        </map>\r\n\r\n      </property>\r\n\r\n\t  <!-- java.util.Properties -->\r\n\t<property name=\"customProperies\">\r\n\t\t<props>\r\n\t\t\t<prop key=\"admin\">admin@nospam.com</prop>\r\n\t\t\t<prop key=\"support\">support@nospam.com</prop>\r\n\t\t</props>\r\n\t</property>\r\n\r\n   </bean>\r\n\r\n</beans>\r\n\r\n```","```java\r\n<bean id=\"adminUser\" class=\"com.howtodoinjava.common.Customer\">\r\n\r\n\t<!-- java.util.Properties -->\r\n\t<property name=\"emails\">\r\n\t\t<props>\r\n\t\t\t<prop key=\"admin\">admin@nospam.com</prop>\r\n\t\t\t<prop key=\"support\">support@nospam.com</prop>\r\n\t\t</props>\r\n\t</property>\r\n\r\n</bean>\r\n\r\n```","```java\r\n<util:properties id=\"emails\" location=\"classpath:com/foo/emails.properties\" />\r\n```","```java\r\n<bean id=\"employeeDAO\" class=\"com.howtodoinjava.EmployeeDAOImpl\" autowire=\"byName\" />\r\n\r\n```","```java\r\n<context:annotation-config />\r\n```","```java\r\n<bean class =\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\"/>\r\n```","```java\r\n@Autowired\r\npublic EmployeeDAOImpl ( EmployeeManager manager ) {\r\n    this.manager = manager;\r\n}\r\n\r\n```","```java\r\n<beans>\r\n\t<context:annotation-config />\r\n</beans>\r\n\r\n```","```java\r\n<beans>\r\n\t<bean class=\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\"/>\r\n</beans>\r\n\r\n```","```java\r\npublic class EmployeeFactoryBean extends AbstractFactoryBean<Object>\r\n{\r\n    private String designation;\r\n\r\n    public String getDesignation() {\r\n        return designation;\r\n    }\r\n\r\n    @Required\r\n    public void setDesignation(String designation) {\r\n        this.designation = designation;\r\n    }\r\n\r\n    //more code here\r\n}\r\n\r\n```","```java\r\n<bean class=\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\" />\r\n```","```java\r\npublic class TextEditor {\r\n   private SpellChecker spellChecker;\r\n\r\n   @Autowired\r\n   public TextEditor(SpellChecker spellChecker){\r\n      System.out.println(\"Inside TextEditor constructor.\" );\r\n      this.spellChecker = spellChecker;\r\n   }\r\n\r\n   public void spellCheck(){\r\n      spellChecker.checkSpelling();\r\n   }\r\n}\r\n\r\n```","```java\r\n<beans>\r\n\r\n   <context:annotation-config/>\r\n\r\n   <!-- Definition for textEditor bean without constructor-arg -->\r\n   <bean id=\"textEditor\" class=\"com.howtodoinjava.TextEditor\">\r\n   </bean>\r\n\r\n   <!-- Definition for spellChecker bean -->\r\n   <bean id=\"spellChecker\" class=\"com.howtodoinjava.SpellChecker\">\r\n   </bean>\r\n\r\n</beans>\r\n\r\n```","```java\r\npublic class Customer \r\n{\r\n\t@Autowired\r\n\tprivate Person person;\r\n}\r\n\r\n```","```java\r\n<bean id=\"customer\" class=\"com.howtodoinjava.common.Customer\" />\r\n\r\n<bean id=\"personA\" class=\"com.howtodoinjava.common.Person\" >\r\n\t<property name=\"name\" value=\"lokesh\" />\r\n</bean>\r\n\r\n<bean id=\"personB\" class=\"com.howtodoinjava.common.Person\" >\r\n\t<property name=\"name\" value=\"alex\" />\r\n</bean>\r\n\r\n```","```java\r\nCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: \r\n\tNo unique bean of type [com.howtodoinjava.common.Person] is defined: \r\n\t\texpected single matching bean but found 2: [personA, personB]\r\n\r\n```","```java\r\npublic class Customer \r\n{\r\n\t@Autowired\r\n\t@Qualifier(\"personA\")\r\n\tprivate Person person;\r\n}\r\n\r\n```","```java\r\npublic class AllApplicationEventListener implements ApplicationListener < ApplicationEvent > \r\n{\r\n    @Override\r\n    public void onApplicationEvent(ApplicationEvent applicationEvent) \r\n\t{\r\n        //process event\r\n    }\r\n}\r\n\r\n```","```java\r\npublic class CustomApplicationEvent extends ApplicationEvent \r\n{ \r\n\tpublic CustomApplicationEvent ( Object source, final String msg ) \r\n\t{\r\n\t\tsuper(source);\r\n\t\tSystem.out.println(\"Created a Custom event\");\r\n\t}\r\n}\r\n\r\n```","```java\r\npublic class CustomEventListener implements ApplicationListener < CustomApplicationEvent > \r\n{\r\n\t@Override\r\n    public void onApplicationEvent(CustomApplicationEvent applicationEvent) {\r\n\t\t//handle event\r\n\t}\r\n}\r\n\r\n```","```java\r\nCustomApplicationEvent customEvent = new CustomApplicationEvent( applicationContext, \"Test message\" );\r\napplicationContext.publishEvent ( customEvent ); \r\n\r\n```"]