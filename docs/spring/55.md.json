["```java\r\n<dependency>\r\n    <groupId>org.springframework.retry</groupId>\r\n    <artifactId>spring-retry</artifactId>\r\n    <version>${version}</version>\r\n</dependency>\r\n<dependency>\r\n\t<groupId>org.springframework</groupId>\r\n\t<artifactId>spring-aspects</artifactId>\r\n\t<version>${version}</version>\r\n</dependency>\r\n\r\n```","```java\r\npackage com.example.springretry;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class MyRestController {\r\n\r\n\t@Autowired\r\n\tBackendAdapter backendAdapter;\r\n\r\n\t@GetMapping(\"/retry\")\r\n\t@ExceptionHandler({ Exception.class })\r\n\tpublic String validateSPringRetryCapability(@RequestParam(required = false) boolean simulateretry,\r\n\t\t\t\t\t\t\t\t@RequestParam(required = false) boolean simulateretryfallback) \r\n\t{\r\n\t\tSystem.out.println(\"===============================\");\r\n\t\tSystem.out.println(\"Inside RestController mathod..\");\r\n\r\n\t\treturn backendAdapter.getBackendResponse(simulateretry, simulateretryfallback);\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.springretry;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.retry.annotation.EnableRetry;\r\n\r\n@EnableRetry\r\n@SpringBootApplication\r\npublic class SpringRetryApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(SpringRetryApplication.class, args);\r\n\t}\r\n}\r\n\r\n```","```java\r\npackage com.example.springretry;\r\n\r\nimport org.springframework.retry.annotation.Backoff;\r\nimport org.springframework.retry.annotation.Recover;\r\nimport org.springframework.retry.annotation.Retryable;\r\n\r\npublic interface BackendAdapter {\r\n\r\n\t@Retryable(value = { RemoteServiceNotAvailableException.class }, maxAttempts = 3, backoff = @Backoff(delay = 1000))\r\n\tpublic String getBackendResponse(boolean simulateretry, boolean simulateretryfallback);\r\n\r\n\t@Recover\r\n\tpublic String getBackendResponseFallback(RuntimeException e);\r\n\r\n}\r\n\r\n```","```java\r\npackage com.example.springretry;\r\n\r\nimport java.util.Random;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class BackendAdapterImpl implements BackendAdapter {\r\n\r\n\t@Override\r\n\tpublic String getBackendResponse(boolean simulateretry, boolean simulateretryfallback) {\r\n\r\n\t\tif (simulateretry) {\r\n\t\t\tSystem.out.println(\"Simulateretry is true, so try to simulate exception scenario.\");\r\n\r\n\t\t\tif (simulateretryfallback) {\r\n\t\t\t\tthrow new RemoteServiceNotAvailableException(\r\n\t\t\t\t\t\t\"Don't worry!! Just Simulated for Spring-retry..Must fallback as all retry will get exception!!!\");\r\n\t\t\t}\r\n\t\t\tint random = new Random().nextInt(4);\r\n\r\n\t\t\tSystem.out.println(\"Random Number : \" + random);\r\n\t\t\tif (random % 2 == 0) {\r\n\t\t\t\tthrow new RemoteServiceNotAvailableException(\"Don't worry!! Just Simulated for Spring-retry..\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn \"Hello from Remote Backend!!!\";\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String getBackendResponseFallback(RuntimeException e) {\r\n\t\tSystem.out.println(\"All retries completed, so Fallback method called!!!\");\r\n\t\treturn \"All retries completed, so Fallback method called!!!\";\r\n\t}\r\n}\r\n\r\n```","```java\r\n===============================\r\nInside RestController method..\r\nSimulateretry is true, so try to simulate exception scenario.\r\nRandom Number : 1\r\n\r\n===============================\r\nInside RestController mathod..\r\nSimulateretry is true, so try to simulate exception scenario.\r\nRandom Number : 2\r\nSimulateretry is true, so try to simulate exception scenario.\r\nRandom Number : 2\r\nSimulateretry is true, so try to simulate exception scenario.\r\nRandom Number : 0\r\nAll retries completed, so Fallback method called!!!\r\n\r\n```","```java\r\n===============================\r\nInside RestController method..\r\nSimulateretry is true, so try to simulate exception scenario.\r\nSimulateretry is true, so try to simulate exception scenario.\r\nSimulateretry is true, so try to simulate exception scenario.\r\nAll retries completed, so Fallback method called!!!\r\n\r\n```"]