["```java\r\npackage com.example.howtodoinjava.elkexamplespringboot;\r\n\r\nimport java.io.PrintWriter;\r\nimport java.io.StringWriter;\r\nimport java.util.Date;\r\n\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.core.ParameterizedTypeReference;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@SpringBootApplication\r\npublic class ElkExampleSpringBootApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(ElkExampleSpringBootApplication.class, args);\r\n\t}\r\n}\r\n\r\n@RestController\r\nclass ELKController {\r\n\tprivate static final Logger LOG = Logger.getLogger(ELKController.class.getName());\r\n\r\n\t@Autowired\r\n\tRestTemplate restTemplete;\r\n\r\n\t@Bean\r\n\tRestTemplate restTemplate() {\r\n\t\treturn new RestTemplate();\r\n\t}\r\n\r\n\t@RequestMapping(value = \"/elkdemo\")\r\n\tpublic String helloWorld() {\r\n\t\tString response = \"Hello user ! \" + new Date();\r\n\t\tLOG.log(Level.INFO, \"/elkdemo - > \" + response);\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\t@RequestMapping(value = \"/elk\")\r\n\tpublic String helloWorld1() {\r\n\r\n\t\tString response = restTemplete.exchange(\"http://localhost:8080/elkdemo\", HttpMethod.GET, null, new ParameterizedTypeReference() {\r\n\t\t}).getBody();\r\n\t\tLOG.log(Level.INFO, \"/elk - > \" + response);\r\n\r\n\t\ttry {\r\n\t\t\tString exceptionrsp = restTemplete.exchange(\"http://localhost:8080/exception\", HttpMethod.GET, null, new ParameterizedTypeReference() {\r\n\t\t\t}).getBody();\r\n\t\t\tLOG.log(Level.INFO, \"/elk trying to print exception - > \" + exceptionrsp);\r\n\t\t\tresponse = response + \" === \" + exceptionrsp;\r\n\t\t} catch (Exception e) {\r\n\t\t\t// exception should not reach here. Really bad practice :)\r\n\t\t}\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\t@RequestMapping(value = \"/exception\")\r\n\tpublic String exception() {\r\n\t\tString rsp = \"\";\r\n\t\ttry {\r\n\t\t\tint i = 1 / 0;\r\n\t\t\t// should get exception\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tLOG.error(e);\r\n\r\n\t\t\tStringWriter sw = new StringWriter();\r\n\t\t\tPrintWriter pw = new PrintWriter(sw);\r\n\t\t\te.printStackTrace(pw);\r\n\t\t\tString sStackTrace = sw.toString(); // stack trace as a string\r\n\t\t\tLOG.error(\"Exception As String :: - > \"+sStackTrace);\r\n\r\n\t\t\trsp = sStackTrace;\r\n\t\t}\r\n\r\n\t\treturn rsp;\r\n\t}\r\n}\r\n\r\n```","```java\r\nlogging.file=elk-example.log\r\nspring.application.name = elk-example\r\n\r\n```","```java\r\ninput {\r\n  file {\r\n    type => \"java\"\r\n    path => \"F:/Study/eclipse_workspace_mars/elk-example-spring-boot/elk-example.log\"\r\n    codec => multiline {\r\n      pattern => \"^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*\"\r\n      negate => \"true\"\r\n      what => \"previous\"\r\n    }\r\n  }\r\n}\r\n\r\nfilter {\r\n  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace\r\n  if [message] =~ \"\\tat\" {\r\n    grok {\r\n      match => [\"message\", \"^(\\tat)\"]\r\n      add_tag => [\"stacktrace\"]\r\n    }\r\n  }\r\n\r\n grok {\r\n    match => [ \"message\", \r\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[(?<thread>[A-Za-z0-9-]+)\\] [A-Za-z0-9.]*\\.(?<class>[A-Za-z0-9#_]+)\\s*:\\s+(?<logmessage>.*)\",\r\n               \"message\",\r\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\\s+(?<logmessage>.*)\"\r\n             ]\r\n  }\r\n\r\n  date {\r\n    match => [ \"timestamp\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\r\n  }\r\n}\r\n\r\noutput {\r\n\r\n  stdout {\r\n    codec => rubydebug\r\n  }\r\n\r\n  # Sending properly parsed log events to elasticsearch\r\n  elasticsearch {\r\n    hosts => [\"localhost:9200\"]\r\n  }\r\n}\r\n\r\n```"]