["```java\nimport org.springframework.batch.core.JobExecution;\nimport org.springframework.batch.core.JobExecutionListener;\n\npublic class JobResultListener implements JobExecutionListener {\n\n\tpublic void beforeJob(JobExecution jobExecution) {\n\t\tSystem.out.println(\"Called beforeJob().\");\n\t}\n\n\tpublic void afterJob(JobExecution jobExecution) {\n\t\tSystem.out.println(\"Called afterJob().\");\n\t}\n}\n\n```","```java\n@Bean\npublic Job demoJob(){\n    return jobs.get(\"demoJob\")\n            .incrementer(new RunIdIncrementer())\n            .listener(new JobResultListener())\n            .start(stepOne())\n            .next(stepTwo())\n            .build();\n}\n\n```","```java\nimport org.springframework.batch.core.ExitStatus;\nimport org.springframework.batch.core.StepExecution;\nimport org.springframework.batch.core.StepExecutionListener;\n\npublic class StepResultListener implements StepExecutionListener {\n\n\t@Override\n\tpublic void beforeStep(StepExecution stepExecution) {\n\t\tSystem.out.println(\"Called beforeStep().\");\n\t}\n\n\t@Override\n\tpublic ExitStatus afterStep(StepExecution stepExecution) {\n\t\tSystem.out.println(\"Called afterStep().\");\n\t\treturn ExitStatus.COMPLETED;\n\t}\n}\n\n```","```java\n@Bean\npublic Step stepOne(){\n    return steps.get(\"stepOne\")\n            .tasklet(new MyTaskOne())\n            .listener(new StepResultListener())\n            .build();\n}\n\n@Bean\npublic Step stepTwo(){\n    return steps.get(\"stepTwo\")\n            .tasklet(new MyTaskTwo())\n            .listener(new StepResultListener())\n            .build();\n}  \n\n```","```java\nimport org.springframework.batch.core.ItemReadListener;\n\npublic class StepItemReadListener implements ItemReadListener<String> {\n\n\t@Override\n\tpublic void beforeRead() {\n\t\tSystem.out.println(\"ItemReadListener - beforeRead\");\n\t}\n\n\t@Override\n\tpublic void afterRead(String item) {\n\t\tSystem.out.println(\"ItemReadListener - afterRead\");\n\t}\n\n\t@Override\n\tpublic void onReadError(Exception ex) {\n\t\tSystem.out.println(\"ItemReadListener - onReadError\");\n\t}\n}\n\n```","```java\n@Bean\npublic Step stepOne(){\n    return steps.get(\"stepOne\")\n            .tasklet(new MyTaskOne())\n            .listener(new StepItemReadListener())\n            .build();\n}\n\n```","```java\nimport org.springframework.batch.core.ItemProcessListener;\n\npublic class StepItemProcessListener implements ItemProcessListener<String, Number> {\n\n\t@Override\n\tpublic void beforeProcess(String item) {\n\t\tSystem.out.println(\"ItemProcessListener - beforeProcess\");\n\t}\n\n\t@Override\n\tpublic void afterProcess(String item, Number result) {\n\t\tSystem.out.println(\"ItemProcessListener - afterProcess\");\n\t}\n\n\t@Override\n\tpublic void onProcessError(String item, Exception e) {\n\t\tSystem.out.println(\"ItemProcessListener - onProcessError\");\n\t}\n}\n\n```","```java\n@Bean\npublic Step stepOne(){\n    return steps.get(\"stepOne\")\n            .tasklet(new MyTaskOne())\n            .listener(new StepItemProcessListener())\n            .build();\n}\n\n```","```java\nimport java.util.List;\nimport org.springframework.batch.core.ItemWriteListener;\n\npublic class StepItemWriteListener implements ItemWriteListener<Number> {\n\n\t@Override\n\tpublic void beforeWrite(List<? extends Number> items) {\n\t\tSystem.out.println(\"ItemWriteListener - beforeWrite\");\n\t}\n\n\t@Override\n\tpublic void afterWrite(List<? extends Number> items) {\n\t\tSystem.out.println(\"ItemWriteListener - afterWrite\");\n\t}\n\n\t@Override\n\tpublic void onWriteError(Exception exception, List<? extends Number> items) {\n\t\tSystem.out.println(\"ItemWriteListener - onWriteError\");\n\t}\n}\n\n```","```java\n@Bean\npublic Step stepOne(){\n    return steps.get(\"stepOne\")\n            .tasklet(new MyTaskOne())\n            .listener(new StepItemWriteListener())\n            .build();\n}\n\n```","```java\nimport org.springframework.batch.core.SkipListener;\n\npublic class StepSkipListener implements SkipListener<String, Number> {\n\n\t@Override\n\tpublic void onSkipInRead(Throwable t) {\n\t\tSystem.out.println(\"StepSkipListener - onSkipInRead\");\n\t}\n\n\t@Override\n\tpublic void onSkipInWrite(Number item, Throwable t) {\n\t\tSystem.out.println(\"StepSkipListener - afterWrite\");\n\t}\n\n\t@Override\n\tpublic void onSkipInProcess(String item, Throwable t) {\n\t\tSystem.out.println(\"StepSkipListener - onWriteError\");\n\t}\n}\n\n```","```java\n@Bean\npublic Step stepOne(){\n    return steps.get(\"stepOne\")\n            .tasklet(new MyTaskOne())\n            .listener(new StepSkipListener())\n            .build();\n}\n\n```"]