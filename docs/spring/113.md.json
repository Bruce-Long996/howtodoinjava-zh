["```java\n<aop:config>\n   <aop:aspect id=\"loggingAspect\" ref=\"loggingAspectBean\">\n   ...\n   </aop:aspect>\n</aop:config>\n\n<bean id=\"loggingAspectBean\" class=\"com.howtodoinjava.demo.aop.EmployeeCRUDLoggingAspect\" />\n\n```","```java\n<aop:config>\n   <aop:aspect id=\"loggingAspect\" ref=\"loggingAspectBean\">\n\n\t\t<aop:pointcut id=\"loggingOperation\"\n\t\t\texpression=\"execution(* com.howtodoinjava.demo.aop.EmployeeManager.*(..))\" />\n\n\t\t<aop:pointcut id=\"transactionOperation\"\n\t\t\texpression=\"execution(* com.howtodoinjava.demo.aop.EmployeeManager.getEmployeeById(..))\" />\n\n   </aop:aspect>\n</aop:config>\n\n<bean id=\"loggingAspectBean\" class=\"com.howtodoinjava.demo.aop.EmployeeCRUDLoggingAspect\" />\n\n```","```java\n<aop:config>\n\n\t\t<!-- Spring AOP Pointcut definitions -->\n\t\t<aop:pointcut id=\"loggingOperation\"\n\t\t\texpression=\"execution(* com.howtodoinjava.demo.aop.EmployeeManager.*(..))\" />\n\n\t\t<aop:pointcut id=\"transactionOperation\"\n\t\t\texpression=\"execution(* com.howtodoinjava.demo.aop.EmployeeManager.getEmployeeById(..))\" />\n\n\t\t<!-- Spring AOP aspect -->\n\t\t<aop:aspect id=\"loggingAspect\" ref=\"loggingAspectBean\">\n\n\t\t\t<!-- Spring AOP advises -->\n\t\t\t<aop:before pointcut-ref=\"loggingOperation\" method=\"logBefore\" />\n\t\t\t<aop:after pointcut-ref=\"loggingOperation\" method=\"logAfter\" />\n\n\t\t</aop:aspect>\n\n\t</aop:config>\n\n```","```java\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/aop/ \n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n\n\t<!-- We don't need to this; This is required only in annotation based AOP support -->\n\t<!-- <aop:aspectj-autoproxy /> -->\n\n\t<aop:config>\n\n\t\t<!-- Spring AOP Pointcut definitions -->\n\t\t<aop:pointcut id=\"loggingOperation\"\n\t\t\texpression=\"execution(* com.howtodoinjava.demo.aop.EmployeeManager.*(..))\" />\n\n\t\t<aop:pointcut id=\"transactionOperation\"\n\t\t\texpression=\"execution(* com.howtodoinjava.demo.aop.EmployeeManager.getEmployeeById(..))\" />\n\n\t\t<!-- Spring AOP aspect 1 -->\n\t\t<aop:aspect id=\"loggingAspect\" ref=\"loggingAspectBean\">\n\n\t\t\t<!-- Spring AOP advises -->\n\t\t\t<aop:before pointcut-ref=\"loggingOperation\" method=\"logBefore\" />\n\t\t\t<aop:after pointcut-ref=\"loggingOperation\" method=\"logAfter\" />\n\n\t\t</aop:aspect>\n\n\t\t<!-- Spring AOP aspect 2 -->\n\t\t<aop:aspect id=\"transactionAspect\" ref=\"transactionAspectBean\">\n\t\t\t<aop:before pointcut-ref=\"transactionOperation\" method=\"getEmployeeById\" />\n\t\t</aop:aspect>\n\n\t</aop:config>\n\n\t<!-- Spring AOP aspect instances -->\n\t<bean id=\"loggingAspectBean\" class=\"com.howtodoinjava.demo.aop.EmployeeCRUDLoggingAspect\" />\n\t<bean id=\"transactionAspectBean\" class=\"com.howtodoinjava.demo.aop.EmployeeCRUDTransactionAspect\" />\n\n\t<!-- Target Object -->\n\t<bean id=\"employeeManager\" class=\"com.howtodoinjava.demo.aop.EmployeeManagerImpl\" />\n\n</beans>\n\n```","```java\npublic class EmployeeDTO {\n\n\tprivate Integer id;\n\tprivate String firstName;\n\tprivate String lastName;\n\n\t//Setters and Getters\n}\n\n```","```java\npublic interface EmployeeManager \n{\n\tpublic EmployeeDTO getEmployeeById(Integer employeeId);\n\n\tpublic List<EmployeeDTO> getAllEmployee();\n\n\tpublic void createEmployee(EmployeeDTO employee);\n\n\tpublic void deleteEmployee(Integer employeeId);\n\n\tpublic void updateEmployee(EmployeeDTO employee);\n}\n\n```","```java\npublic class EmployeeManagerImpl implements EmployeeManager\n{\n\tpublic EmployeeDTO getEmployeeById(Integer employeeId) {\n\t\tSystem.out.println(\"Method getEmployeeById() called\");\n\t\treturn new EmployeeDTO();\n\t}\n\n\tpublic List<EmployeeDTO> getAllEmployee() {\n\t\tSystem.out.println(\"Method getAllEmployee() called\");\n\t\treturn new ArrayList<EmployeeDTO>();\n\t}\n\n\tpublic void createEmployee(EmployeeDTO employee) {\n\t\tSystem.out.println(\"Method createEmployee() called\");\n\t}\n\n\tpublic void deleteEmployee(Integer employeeId) {\n\t\tSystem.out.println(\"Method deleteEmployee() called\");\n\t}\n\n\tpublic void updateEmployee(EmployeeDTO employee) {\n\t\tSystem.out.println(\"Method updateEmployee() called\");\n\t}\n}\n\n```","```java\npublic class EmployeeCRUDLoggingAspect\n{\n\tpublic void logBefore(JoinPoint joinPoint) \n\t{\n\t\tSystem.out.println(\"EmployeeCRUDAspect.logBefore() : \" + joinPoint.getSignature().getName());\n\t}\n\n\tpublic void logAfter(JoinPoint joinPoint) \n\t{\n\t\tSystem.out.println(\"EmployeeCRUDAspect.logAfter() : \" + joinPoint.getSignature().getName());\n\t}\n}\n\n```","```java\npublic class EmployeeCRUDTransactionAspect\n{\n\tpublic void getEmployeeById(JoinPoint joinPoint)\n\t{\n\t\tSystem.out.println(\"EmployeeCRUDTransactionAspect.getEmployeeById() : \"\n\t\t\t\t+ joinPoint.getSignature().getName());\n\t}\n}\n\n```","```java\npublic class TestAOP\n{\n\t@SuppressWarnings(\"resource\")\n\tpublic static void main(String[] args) \n\t{\n\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"com/howtodoinjava/demo/aop/applicationContext.xml\");\n\t\tEmployeeManager manager = ( EmployeeManager ) context.getBean(\"employeeManager\");\n\n\t\tmanager.getEmployeeById(1);\n\n\t\tmanager.createEmployee(new EmployeeDTO());\n\n\t\tmanager.deleteEmployee(100);\n\t}\n}\n\nOutput:\n\nEmployeeCRUDAspect.logBefore() : getEmployeeById\nEmployeeCRUDTransactionAspect.getEmployeeById() : getEmployeeById\nMethod getEmployeeById() called\nEmployeeCRUDAspect.logAfter() : getEmployeeById\n\nEmployeeCRUDAspect.logBefore() : createEmployee\nMethod createEmployee() called\nEmployeeCRUDAspect.logAfter() : createEmployee\n\nEmployeeCRUDAspect.logBefore() : deleteEmployee\nMethod deleteEmployee() called\nEmployeeCRUDAspect.logAfter() : deleteEmployee\n\n```"]